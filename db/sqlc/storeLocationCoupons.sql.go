// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: storeLocationCoupons.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createStoreLocationCoupon = `-- name: CreateStoreLocationCoupon :one
INSERT INTO store_location_coupons (
    store_location_id,
    product_id,
    coupon_id,
    price,
    coupon_price,
    is_percent,
    start_date,
    end_date
)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8
)
RETURNING id
`

type CreateStoreLocationCouponParams struct {
	StoreLocationID int32          `json:"store_location_id"`
	ProductID       int32          `json:"product_id"`
	CouponID        int32          `json:"coupon_id"`
	Price           pgtype.Numeric `json:"price"`
	CouponPrice     pgtype.Numeric `json:"coupon_price"`
	IsPercent       pgtype.Bool    `json:"is_percent"`
	StartDate       pgtype.Date    `json:"start_date"`
	EndDate         pgtype.Date    `json:"end_date"`
}

func (q *Queries) CreateStoreLocationCoupon(ctx context.Context, arg CreateStoreLocationCouponParams) (int32, error) {
	row := q.db.QueryRow(ctx, createStoreLocationCoupon,
		arg.StoreLocationID,
		arg.ProductID,
		arg.CouponID,
		arg.Price,
		arg.CouponPrice,
		arg.IsPercent,
		arg.StartDate,
		arg.EndDate,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteStoreLocationCoupon = `-- name: DeleteStoreLocationCoupon :one
DELETE FROM store_location_coupons WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteStoreLocationCoupon(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteStoreLocationCoupon, id)
	err := row.Scan(&id)
	return id, err
}

const selectStoreLocationCoupons = `-- name: SelectStoreLocationCoupons :many
SELECT id, store_location_id, product_id, coupon_id, price, coupon_price, is_percent, start_date, end_date, sequence, isblocked, isdeleted, created_at FROM store_location_coupons
`

func (q *Queries) SelectStoreLocationCoupons(ctx context.Context) ([]StoreLocationCoupon, error) {
	rows, err := q.db.Query(ctx, selectStoreLocationCoupons)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []StoreLocationCoupon{}
	for rows.Next() {
		var i StoreLocationCoupon
		if err := rows.Scan(
			&i.ID,
			&i.StoreLocationID,
			&i.ProductID,
			&i.CouponID,
			&i.Price,
			&i.CouponPrice,
			&i.IsPercent,
			&i.StartDate,
			&i.EndDate,
			&i.Sequence,
			&i.Isblocked,
			&i.Isdeleted,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStoreLocationCoupon = `-- name: UpdateStoreLocationCoupon :one
UPDATE store_location_coupons
SET
    store_location_id = $2,
    product_id = $3,
    coupon_id = $4,
    price = $5,
    coupon_price = $6,
    is_percent = $7,
    start_date = $8,
    end_date = $9
WHERE id = $1
RETURNING id, store_location_id, product_id, coupon_id, price, coupon_price, is_percent, start_date, end_date, sequence, isblocked, isdeleted, created_at
`

type UpdateStoreLocationCouponParams struct {
	ID              int32          `json:"id"`
	StoreLocationID int32          `json:"store_location_id"`
	ProductID       int32          `json:"product_id"`
	CouponID        int32          `json:"coupon_id"`
	Price           pgtype.Numeric `json:"price"`
	CouponPrice     pgtype.Numeric `json:"coupon_price"`
	IsPercent       pgtype.Bool    `json:"is_percent"`
	StartDate       pgtype.Date    `json:"start_date"`
	EndDate         pgtype.Date    `json:"end_date"`
}

func (q *Queries) UpdateStoreLocationCoupon(ctx context.Context, arg UpdateStoreLocationCouponParams) (StoreLocationCoupon, error) {
	row := q.db.QueryRow(ctx, updateStoreLocationCoupon,
		arg.ID,
		arg.StoreLocationID,
		arg.ProductID,
		arg.CouponID,
		arg.Price,
		arg.CouponPrice,
		arg.IsPercent,
		arg.StartDate,
		arg.EndDate,
	)
	var i StoreLocationCoupon
	err := row.Scan(
		&i.ID,
		&i.StoreLocationID,
		&i.ProductID,
		&i.CouponID,
		&i.Price,
		&i.CouponPrice,
		&i.IsPercent,
		&i.StartDate,
		&i.EndDate,
		&i.Sequence,
		&i.Isblocked,
		&i.Isdeleted,
		&i.CreatedAt,
	)
	return i, err
}
