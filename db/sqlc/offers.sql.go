// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: offers.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOffer = `-- name: CreateOffer :one
INSERT INTO offers (deal_no, store_id, product_id, name, path, description, isblocked, isdeleted, user_id)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id
`

type CreateOfferParams struct {
	DealNo      pgtype.Text `json:"deal_no"`
	StoreID     pgtype.Int4 `json:"store_id"`
	ProductID   pgtype.Int4 `json:"product_id"`
	Name        string      `json:"name"`
	Path        pgtype.Text `json:"path"`
	Description pgtype.Text `json:"description"`
	Isblocked   pgtype.Bool `json:"isblocked"`
	Isdeleted   pgtype.Bool `json:"isdeleted"`
	UserID      pgtype.Int4 `json:"user_id"`
}

func (q *Queries) CreateOffer(ctx context.Context, arg CreateOfferParams) (int32, error) {
	row := q.db.QueryRow(ctx, createOffer,
		arg.DealNo,
		arg.StoreID,
		arg.ProductID,
		arg.Name,
		arg.Path,
		arg.Description,
		arg.Isblocked,
		arg.Isdeleted,
		arg.UserID,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteOffer = `-- name: DeleteOffer :one
DELETE FROM offers WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteOffer(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteOffer, id)
	err := row.Scan(&id)
	return id, err
}

const selectOffers = `-- name: SelectOffers :many
SELECT id, deal_no, store_id, product_id, name, path, description, isblocked, isdeleted, user_id, created_at FROM offers
`

func (q *Queries) SelectOffers(ctx context.Context) ([]Offer, error) {
	rows, err := q.db.Query(ctx, selectOffers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Offer{}
	for rows.Next() {
		var i Offer
		if err := rows.Scan(
			&i.ID,
			&i.DealNo,
			&i.StoreID,
			&i.ProductID,
			&i.Name,
			&i.Path,
			&i.Description,
			&i.Isblocked,
			&i.Isdeleted,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOffer = `-- name: UpdateOffer :one
UPDATE offers
SET
    deal_no = $2,
    store_id = $3,
    product_id = $4,
    name = $5,
    path = $6,
    description = $7,
    isblocked = $8,
    isdeleted = $9,
    user_id = $10
WHERE id = $1
RETURNING id
`

type UpdateOfferParams struct {
	ID          int32       `json:"id"`
	DealNo      pgtype.Text `json:"deal_no"`
	StoreID     pgtype.Int4 `json:"store_id"`
	ProductID   pgtype.Int4 `json:"product_id"`
	Name        string      `json:"name"`
	Path        pgtype.Text `json:"path"`
	Description pgtype.Text `json:"description"`
	Isblocked   pgtype.Bool `json:"isblocked"`
	Isdeleted   pgtype.Bool `json:"isdeleted"`
	UserID      pgtype.Int4 `json:"user_id"`
}

func (q *Queries) UpdateOffer(ctx context.Context, arg UpdateOfferParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateOffer,
		arg.ID,
		arg.DealNo,
		arg.StoreID,
		arg.ProductID,
		arg.Name,
		arg.Path,
		arg.Description,
		arg.Isblocked,
		arg.Isdeleted,
		arg.UserID,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
