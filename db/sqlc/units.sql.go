// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: units.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUnit = `-- name: CreateUnit :one
INSERT INTO units (name, isdeleted, isblocked)
VALUES ($1, $2, $3)
RETURNING id
`

type CreateUnitParams struct {
	Name      string      `json:"name"`
	Isdeleted pgtype.Bool `json:"isdeleted"`
	Isblocked pgtype.Bool `json:"isblocked"`
}

func (q *Queries) CreateUnit(ctx context.Context, arg CreateUnitParams) (int32, error) {
	row := q.db.QueryRow(ctx, createUnit, arg.Name, arg.Isdeleted, arg.Isblocked)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteUnit = `-- name: DeleteUnit :one
DELETE FROM units WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteUnit(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteUnit, id)
	err := row.Scan(&id)
	return id, err
}

const selectUnits = `-- name: SelectUnits :many
SELECT id, name, isdeleted, isblocked, created_at FROM units WHERE isdeleted = false AND isblocked = false
`

func (q *Queries) SelectUnits(ctx context.Context) ([]Unit, error) {
	rows, err := q.db.Query(ctx, selectUnits)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Unit{}
	for rows.Next() {
		var i Unit
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Isdeleted,
			&i.Isblocked,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUnit = `-- name: UpdateUnit :one
UPDATE units
SET name = $2, isdeleted = $3, isblocked = $4
WHERE id = $1
RETURNING id
`

type UpdateUnitParams struct {
	ID        int32       `json:"id"`
	Name      string      `json:"name"`
	Isdeleted pgtype.Bool `json:"isdeleted"`
	Isblocked pgtype.Bool `json:"isblocked"`
}

func (q *Queries) UpdateUnit(ctx context.Context, arg UpdateUnitParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateUnit,
		arg.ID,
		arg.Name,
		arg.Isdeleted,
		arg.Isblocked,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
