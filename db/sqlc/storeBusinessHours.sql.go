// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: storeBusinessHours.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createStoreBusinessHours = `-- name: CreateStoreBusinessHours :one
INSERT INTO store_business_hours (
    store_location_id,
    day,
    start_time,
    end_time
)
VALUES (
    $1,
    $2,
    $3,
    $4
)
RETURNING id
`

type CreateStoreBusinessHoursParams struct {
	StoreLocationID int32       `json:"store_location_id"`
	Day             string      `json:"day"`
	StartTime       pgtype.Date `json:"start_time"`
	EndTime         pgtype.Date `json:"end_time"`
}

func (q *Queries) CreateStoreBusinessHours(ctx context.Context, arg CreateStoreBusinessHoursParams) (int32, error) {
	row := q.db.QueryRow(ctx, createStoreBusinessHours,
		arg.StoreLocationID,
		arg.Day,
		arg.StartTime,
		arg.EndTime,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteStoreBusinessHours = `-- name: DeleteStoreBusinessHours :one
DELETE FROM store_business_hours WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteStoreBusinessHours(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteStoreBusinessHours, id)
	err := row.Scan(&id)
	return id, err
}

const selectStoreBusinessHours = `-- name: SelectStoreBusinessHours :many
SELECT id, store_location_id, day, start_time, end_time, created_at FROM store_business_hours
`

func (q *Queries) SelectStoreBusinessHours(ctx context.Context) ([]StoreBusinessHour, error) {
	rows, err := q.db.Query(ctx, selectStoreBusinessHours)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []StoreBusinessHour{}
	for rows.Next() {
		var i StoreBusinessHour
		if err := rows.Scan(
			&i.ID,
			&i.StoreLocationID,
			&i.Day,
			&i.StartTime,
			&i.EndTime,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStoreBusinessHours = `-- name: UpdateStoreBusinessHours :one
UPDATE store_business_hours
SET
    store_location_id = $2,
    day = $3,
    start_time = $4,
    end_time = $5
WHERE id = $1
RETURNING id, store_location_id, day, start_time, end_time, created_at
`

type UpdateStoreBusinessHoursParams struct {
	ID              int32       `json:"id"`
	StoreLocationID int32       `json:"store_location_id"`
	Day             string      `json:"day"`
	StartTime       pgtype.Date `json:"start_time"`
	EndTime         pgtype.Date `json:"end_time"`
}

func (q *Queries) UpdateStoreBusinessHours(ctx context.Context, arg UpdateStoreBusinessHoursParams) (StoreBusinessHour, error) {
	row := q.db.QueryRow(ctx, updateStoreBusinessHours,
		arg.ID,
		arg.StoreLocationID,
		arg.Day,
		arg.StartTime,
		arg.EndTime,
	)
	var i StoreBusinessHour
	err := row.Scan(
		&i.ID,
		&i.StoreLocationID,
		&i.Day,
		&i.StartTime,
		&i.EndTime,
		&i.CreatedAt,
	)
	return i, err
}
