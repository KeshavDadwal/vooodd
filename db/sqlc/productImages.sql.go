// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: productImages.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProductImage = `-- name: CreateProductImage :one
INSERT INTO product_images (
    product_id,
    image,
    isdeleted,
    isblocked,
    isdefault
)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
)
RETURNING id
`

type CreateProductImageParams struct {
	ProductID int32       `json:"product_id"`
	Image     string      `json:"image"`
	Isdeleted pgtype.Bool `json:"isdeleted"`
	Isblocked pgtype.Bool `json:"isblocked"`
	Isdefault pgtype.Bool `json:"isdefault"`
}

func (q *Queries) CreateProductImage(ctx context.Context, arg CreateProductImageParams) (int32, error) {
	row := q.db.QueryRow(ctx, createProductImage,
		arg.ProductID,
		arg.Image,
		arg.Isdeleted,
		arg.Isblocked,
		arg.Isdefault,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteProductImage = `-- name: DeleteProductImage :one
DELETE FROM product_images WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteProductImage(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteProductImage, id)
	err := row.Scan(&id)
	return id, err
}

const selectProductImages = `-- name: SelectProductImages :many
SELECT id, product_id, image, isdeleted, isblocked, isdefault, created_at FROM product_images
`

func (q *Queries) SelectProductImages(ctx context.Context) ([]ProductImage, error) {
	rows, err := q.db.Query(ctx, selectProductImages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductImage{}
	for rows.Next() {
		var i ProductImage
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.Image,
			&i.Isdeleted,
			&i.Isblocked,
			&i.Isdefault,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProductImage = `-- name: UpdateProductImage :one
UPDATE product_images
SET
    product_id = $2,
    image = $3,
    isdeleted = $4,
    isblocked = $5,
    isdefault = $6
WHERE id = $1
RETURNING id
`

type UpdateProductImageParams struct {
	ID        int32       `json:"id"`
	ProductID int32       `json:"product_id"`
	Image     string      `json:"image"`
	Isdeleted pgtype.Bool `json:"isdeleted"`
	Isblocked pgtype.Bool `json:"isblocked"`
	Isdefault pgtype.Bool `json:"isdefault"`
}

func (q *Queries) UpdateProductImage(ctx context.Context, arg UpdateProductImageParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateProductImage,
		arg.ID,
		arg.ProductID,
		arg.Image,
		arg.Isdeleted,
		arg.Isblocked,
		arg.Isdefault,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
