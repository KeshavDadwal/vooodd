// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: contentManagementMobileLanguages.sql

package db

import (
	"context"
)

const createContentManagementMobileLanguage = `-- name: CreateContentManagementMobileLanguage :one
INSERT INTO content_management_mobile_languages (content_management_mobile_id, language_id, title, link, link_text, content)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id
`

type CreateContentManagementMobileLanguageParams struct {
	ContentManagementMobileID int32  `json:"content_management_mobile_id"`
	LanguageID                int32  `json:"language_id"`
	Title                     string `json:"title"`
	Link                      string `json:"link"`
	LinkText                  string `json:"link_text"`
	Content                   string `json:"content"`
}

func (q *Queries) CreateContentManagementMobileLanguage(ctx context.Context, arg CreateContentManagementMobileLanguageParams) (int32, error) {
	row := q.db.QueryRow(ctx, createContentManagementMobileLanguage,
		arg.ContentManagementMobileID,
		arg.LanguageID,
		arg.Title,
		arg.Link,
		arg.LinkText,
		arg.Content,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteContentManagementMobileLanguage = `-- name: DeleteContentManagementMobileLanguage :one
DELETE FROM content_management_mobile_languages WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteContentManagementMobileLanguage(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteContentManagementMobileLanguage, id)
	err := row.Scan(&id)
	return id, err
}

const selectAllContentManagementMobileLanguages = `-- name: SelectAllContentManagementMobileLanguages :many
SELECT id, content_management_mobile_id, language_id, title, link, link_text, content, created_at FROM content_management_mobile_languages
`

func (q *Queries) SelectAllContentManagementMobileLanguages(ctx context.Context) ([]ContentManagementMobileLanguage, error) {
	rows, err := q.db.Query(ctx, selectAllContentManagementMobileLanguages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ContentManagementMobileLanguage{}
	for rows.Next() {
		var i ContentManagementMobileLanguage
		if err := rows.Scan(
			&i.ID,
			&i.ContentManagementMobileID,
			&i.LanguageID,
			&i.Title,
			&i.Link,
			&i.LinkText,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectContentManagementMobileLanguages = `-- name: SelectContentManagementMobileLanguages :one
SELECT id, content_management_mobile_id, language_id, title, link, link_text, content, created_at FROM content_management_mobile_languages WHERE id = $1
`

func (q *Queries) SelectContentManagementMobileLanguages(ctx context.Context, id int32) (ContentManagementMobileLanguage, error) {
	row := q.db.QueryRow(ctx, selectContentManagementMobileLanguages, id)
	var i ContentManagementMobileLanguage
	err := row.Scan(
		&i.ID,
		&i.ContentManagementMobileID,
		&i.LanguageID,
		&i.Title,
		&i.Link,
		&i.LinkText,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const updateContentManagementMobileLanguage = `-- name: UpdateContentManagementMobileLanguage :one
UPDATE content_management_mobile_languages
SET title = $3, link = $4, link_text = $5, content = $6
WHERE id = $1 AND content_management_mobile_id = $2
RETURNING id
`

type UpdateContentManagementMobileLanguageParams struct {
	ID                        int32  `json:"id"`
	ContentManagementMobileID int32  `json:"content_management_mobile_id"`
	Title                     string `json:"title"`
	Link                      string `json:"link"`
	LinkText                  string `json:"link_text"`
	Content                   string `json:"content"`
}

func (q *Queries) UpdateContentManagementMobileLanguage(ctx context.Context, arg UpdateContentManagementMobileLanguageParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateContentManagementMobileLanguage,
		arg.ID,
		arg.ContentManagementMobileID,
		arg.Title,
		arg.Link,
		arg.LinkText,
		arg.Content,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
