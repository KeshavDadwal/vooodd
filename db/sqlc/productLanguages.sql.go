// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: productLanguages.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProductLanguage = `-- name: CreateProductLanguage :one
INSERT INTO product_languages (
    product_id,
    language_id,
    name,
    sku,
    description,
    short_description,
    weight,
    meta_title,
    meta_keywords,
    meta_description
)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10
)
RETURNING id
`

type CreateProductLanguageParams struct {
	ProductID        pgtype.Int4    `json:"product_id"`
	LanguageID       pgtype.Int4    `json:"language_id"`
	Name             string         `json:"name"`
	Sku              string         `json:"sku"`
	Description      pgtype.Text    `json:"description"`
	ShortDescription pgtype.Text    `json:"short_description"`
	Weight           pgtype.Numeric `json:"weight"`
	MetaTitle        string         `json:"meta_title"`
	MetaKeywords     string         `json:"meta_keywords"`
	MetaDescription  string         `json:"meta_description"`
}

func (q *Queries) CreateProductLanguage(ctx context.Context, arg CreateProductLanguageParams) (int32, error) {
	row := q.db.QueryRow(ctx, createProductLanguage,
		arg.ProductID,
		arg.LanguageID,
		arg.Name,
		arg.Sku,
		arg.Description,
		arg.ShortDescription,
		arg.Weight,
		arg.MetaTitle,
		arg.MetaKeywords,
		arg.MetaDescription,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteProductLanguage = `-- name: DeleteProductLanguage :one
DELETE FROM product_languages WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteProductLanguage(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteProductLanguage, id)
	err := row.Scan(&id)
	return id, err
}

const selectProductLanguages = `-- name: SelectProductLanguages :many
SELECT id, product_id, language_id, name, sku, description, short_description, weight, meta_title, meta_keywords, meta_description, created_at FROM product_languages
`

func (q *Queries) SelectProductLanguages(ctx context.Context) ([]ProductLanguage, error) {
	rows, err := q.db.Query(ctx, selectProductLanguages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductLanguage{}
	for rows.Next() {
		var i ProductLanguage
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.LanguageID,
			&i.Name,
			&i.Sku,
			&i.Description,
			&i.ShortDescription,
			&i.Weight,
			&i.MetaTitle,
			&i.MetaKeywords,
			&i.MetaDescription,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProductLanguage = `-- name: UpdateProductLanguage :one
UPDATE product_languages
SET
    product_id = $2,
    language_id = $3,
    name = $4,
    sku = $5,
    description = $6,
    short_description = $7,
    weight = $8,
    meta_title = $9,
    meta_keywords = $10,
    meta_description = $11
WHERE id = $1
RETURNING id
`

type UpdateProductLanguageParams struct {
	ID               int32          `json:"id"`
	ProductID        pgtype.Int4    `json:"product_id"`
	LanguageID       pgtype.Int4    `json:"language_id"`
	Name             string         `json:"name"`
	Sku              string         `json:"sku"`
	Description      pgtype.Text    `json:"description"`
	ShortDescription pgtype.Text    `json:"short_description"`
	Weight           pgtype.Numeric `json:"weight"`
	MetaTitle        string         `json:"meta_title"`
	MetaKeywords     string         `json:"meta_keywords"`
	MetaDescription  string         `json:"meta_description"`
}

func (q *Queries) UpdateProductLanguage(ctx context.Context, arg UpdateProductLanguageParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateProductLanguage,
		arg.ID,
		arg.ProductID,
		arg.LanguageID,
		arg.Name,
		arg.Sku,
		arg.Description,
		arg.ShortDescription,
		arg.Weight,
		arg.MetaTitle,
		arg.MetaKeywords,
		arg.MetaDescription,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
