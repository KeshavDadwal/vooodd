// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: likeCounts.sql

package db

import (
	"context"
)

const createLikeCount = `-- name: CreateLikeCount :one
INSERT INTO like_counts (
    user_id,
    offer_id
)
VALUES (
    $1,
    $2
)
RETURNING id
`

type CreateLikeCountParams struct {
	UserID  int32 `json:"user_id"`
	OfferID int32 `json:"offer_id"`
}

func (q *Queries) CreateLikeCount(ctx context.Context, arg CreateLikeCountParams) (int32, error) {
	row := q.db.QueryRow(ctx, createLikeCount, arg.UserID, arg.OfferID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteLikeCount = `-- name: DeleteLikeCount :one
DELETE FROM like_counts WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteLikeCount(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteLikeCount, id)
	err := row.Scan(&id)
	return id, err
}

const selectAlllikeCounts = `-- name: SelectAlllikeCounts :one
SELECT id, user_id, offer_id, created_at FROM like_counts
`

func (q *Queries) SelectAlllikeCounts(ctx context.Context) (LikeCount, error) {
	row := q.db.QueryRow(ctx, selectAlllikeCounts)
	var i LikeCount
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OfferID,
		&i.CreatedAt,
	)
	return i, err
}
