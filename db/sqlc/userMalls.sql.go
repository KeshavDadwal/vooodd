// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: userMalls.sql

package db

import (
	"context"
)

const createUserMallMapping = `-- name: CreateUserMallMapping :one
INSERT INTO user_malls (
    user_id,
    mall_id,
    device_id
)
VALUES (
    $1,
    $2,
    $3
)
RETURNING id
`

type CreateUserMallMappingParams struct {
	UserID   int32  `json:"user_id"`
	MallID   int32  `json:"mall_id"`
	DeviceID string `json:"device_id"`
}

func (q *Queries) CreateUserMallMapping(ctx context.Context, arg CreateUserMallMappingParams) (int32, error) {
	row := q.db.QueryRow(ctx, createUserMallMapping, arg.UserID, arg.MallID, arg.DeviceID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteUserMallMappingByUserId = `-- name: DeleteUserMallMappingByUserId :one
DELETE FROM user_malls
WHERE
    user_id = $1
    RETURNING id
`

func (q *Queries) DeleteUserMallMappingByUserId(ctx context.Context, userID int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteUserMallMappingByUserId, userID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getUserMallMappingByUserId = `-- name: GetUserMallMappingByUserId :one
SELECT
    id,
    user_id,
    mall_id,
    device_id,
    created_at
FROM
    user_malls
WHERE
    user_id = $1
`

func (q *Queries) GetUserMallMappingByUserId(ctx context.Context, userID int32) (UserMall, error) {
	row := q.db.QueryRow(ctx, getUserMallMappingByUserId, userID)
	var i UserMall
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.MallID,
		&i.DeviceID,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserMallMapping = `-- name: UpdateUserMallMapping :one
UPDATE user_malls
SET
    mall_id = $2
WHERE
    user_id = $1
    RETURNING id
`

type UpdateUserMallMappingParams struct {
	UserID int32 `json:"user_id"`
	MallID int32 `json:"mall_id"`
}

func (q *Queries) UpdateUserMallMapping(ctx context.Context, arg UpdateUserMallMappingParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateUserMallMapping, arg.UserID, arg.MallID)
	var id int32
	err := row.Scan(&id)
	return id, err
}
