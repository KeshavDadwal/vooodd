// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    first_name,
    last_name,
    gender,
    dob,
    address,
    city,
    state,
    country_id,
    zip,
    mobile_no,
    email,
    username,
    password,
    user_type,
    latitude,
    longitude,
    photo,
    facebook_id,
    google_id
) VALUES (
    $1,
    $2,
    $3::gender_enum,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15,
    $16,
    $17,
    $18,
    $19
) RETURNING id, first_name, last_name, gender, dob, address, city, state, country_id, zip, mobile_no, email, username, password, user_type, isdeleted, isblocked, status, latitude, longitude, photo, facebook_id, google_id, created_at, last_login_time
`

type CreateUserParams struct {
	FirstName  string         `json:"first_name"`
	LastName   string         `json:"last_name"`
	Column3    GenderEnum     `json:"column_3"`
	Dob        pgtype.Date    `json:"dob"`
	Address    string         `json:"address"`
	City       string         `json:"city"`
	State      string         `json:"state"`
	CountryID  pgtype.Int4    `json:"country_id"`
	Zip        string         `json:"zip"`
	MobileNo   string         `json:"mobile_no"`
	Email      string         `json:"email"`
	Username   string         `json:"username"`
	Password   string         `json:"password"`
	UserType   pgtype.Text    `json:"user_type"`
	Latitude   pgtype.Numeric `json:"latitude"`
	Longitude  pgtype.Numeric `json:"longitude"`
	Photo      pgtype.Text    `json:"photo"`
	FacebookID pgtype.Text    `json:"facebook_id"`
	GoogleID   pgtype.Text    `json:"google_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Column3,
		arg.Dob,
		arg.Address,
		arg.City,
		arg.State,
		arg.CountryID,
		arg.Zip,
		arg.MobileNo,
		arg.Email,
		arg.Username,
		arg.Password,
		arg.UserType,
		arg.Latitude,
		arg.Longitude,
		arg.Photo,
		arg.FacebookID,
		arg.GoogleID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Gender,
		&i.Dob,
		&i.Address,
		&i.City,
		&i.State,
		&i.CountryID,
		&i.Zip,
		&i.MobileNo,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.UserType,
		&i.Isdeleted,
		&i.Isblocked,
		&i.Status,
		&i.Latitude,
		&i.Longitude,
		&i.Photo,
		&i.FacebookID,
		&i.GoogleID,
		&i.CreatedAt,
		&i.LastLoginTime,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
DELETE FROM users WHERE id = $1
RETURNING id, first_name, last_name, gender, dob, address, city, state, country_id, zip, mobile_no, email, username, password, user_type, isdeleted, isblocked, status, latitude, longitude, photo, facebook_id, google_id, created_at, last_login_time
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, deleteUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Gender,
		&i.Dob,
		&i.Address,
		&i.City,
		&i.State,
		&i.CountryID,
		&i.Zip,
		&i.MobileNo,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.UserType,
		&i.Isdeleted,
		&i.Isblocked,
		&i.Status,
		&i.Latitude,
		&i.Longitude,
		&i.Photo,
		&i.FacebookID,
		&i.GoogleID,
		&i.CreatedAt,
		&i.LastLoginTime,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, first_name, last_name, gender, dob, address, city, state, country_id, zip, mobile_no, email, username, password, user_type, isdeleted, isblocked, status, latitude, longitude, photo, facebook_id, google_id, created_at, last_login_time FROM users WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Gender,
		&i.Dob,
		&i.Address,
		&i.City,
		&i.State,
		&i.CountryID,
		&i.Zip,
		&i.MobileNo,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.UserType,
		&i.Isdeleted,
		&i.Isblocked,
		&i.Status,
		&i.Latitude,
		&i.Longitude,
		&i.Photo,
		&i.FacebookID,
		&i.GoogleID,
		&i.CreatedAt,
		&i.LastLoginTime,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    first_name = $2,
    last_name = $3,
    gender = $4::gender_enum,
    dob = $5,
    address = $6,
    city = $7,
    state = $8,
    country_id = $9,
    zip = $10,
    mobile_no = $11,
    email = $12,
    username = $13,
    password = $14,
    user_type = $15,
    latitude = $16,
    longitude = $17,
    photo = $18,
    facebook_id = $19,
    google_id = $20
WHERE id = $1
RETURNING id, first_name, last_name, gender, dob, address, city, state, country_id, zip, mobile_no, email, username, password, user_type, isdeleted, isblocked, status, latitude, longitude, photo, facebook_id, google_id, created_at, last_login_time
`

type UpdateUserParams struct {
	ID         int32          `json:"id"`
	FirstName  string         `json:"first_name"`
	LastName   string         `json:"last_name"`
	Column4    GenderEnum     `json:"column_4"`
	Dob        pgtype.Date    `json:"dob"`
	Address    string         `json:"address"`
	City       string         `json:"city"`
	State      string         `json:"state"`
	CountryID  pgtype.Int4    `json:"country_id"`
	Zip        string         `json:"zip"`
	MobileNo   string         `json:"mobile_no"`
	Email      string         `json:"email"`
	Username   string         `json:"username"`
	Password   string         `json:"password"`
	UserType   pgtype.Text    `json:"user_type"`
	Latitude   pgtype.Numeric `json:"latitude"`
	Longitude  pgtype.Numeric `json:"longitude"`
	Photo      pgtype.Text    `json:"photo"`
	FacebookID pgtype.Text    `json:"facebook_id"`
	GoogleID   pgtype.Text    `json:"google_id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Column4,
		arg.Dob,
		arg.Address,
		arg.City,
		arg.State,
		arg.CountryID,
		arg.Zip,
		arg.MobileNo,
		arg.Email,
		arg.Username,
		arg.Password,
		arg.UserType,
		arg.Latitude,
		arg.Longitude,
		arg.Photo,
		arg.FacebookID,
		arg.GoogleID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Gender,
		&i.Dob,
		&i.Address,
		&i.City,
		&i.State,
		&i.CountryID,
		&i.Zip,
		&i.MobileNo,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.UserType,
		&i.Isdeleted,
		&i.Isblocked,
		&i.Status,
		&i.Latitude,
		&i.Longitude,
		&i.Photo,
		&i.FacebookID,
		&i.GoogleID,
		&i.CreatedAt,
		&i.LastLoginTime,
	)
	return i, err
}
