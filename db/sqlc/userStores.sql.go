// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: userStores.sql

package db

import (
	"context"
)

const createUserStoreRelationship = `-- name: CreateUserStoreRelationship :one
INSERT INTO user_stores (
    user_id,
    store_location_id
)
VALUES (
    $1,
    $2
)
RETURNING id
`

type CreateUserStoreRelationshipParams struct {
	UserID          int32 `json:"user_id"`
	StoreLocationID int32 `json:"store_location_id"`
}

func (q *Queries) CreateUserStoreRelationship(ctx context.Context, arg CreateUserStoreRelationshipParams) (int32, error) {
	row := q.db.QueryRow(ctx, createUserStoreRelationship, arg.UserID, arg.StoreLocationID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteUserStoreRelationship = `-- name: DeleteUserStoreRelationship :one
DELETE FROM user_stores
WHERE
    id = $1
    RETURNING id
`

func (q *Queries) DeleteUserStoreRelationship(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteUserStoreRelationship, id)
	err := row.Scan(&id)
	return id, err
}

const getUserFavoriteStores = `-- name: GetUserFavoriteStores :many
SELECT
    id,
    user_id,
    store_location_id,
    created_at
FROM
    user_stores
WHERE
    user_id = $1
`

func (q *Queries) GetUserFavoriteStores(ctx context.Context, userID int32) ([]UserStore, error) {
	rows, err := q.db.Query(ctx, getUserFavoriteStores, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserStore{}
	for rows.Next() {
		var i UserStore
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.StoreLocationID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserStoreRelationship = `-- name: UpdateUserStoreRelationship :one
UPDATE user_stores
SET
    store_location_id = $2
WHERE
    id = $1
    RETURNING id
`

type UpdateUserStoreRelationshipParams struct {
	ID              int32 `json:"id"`
	StoreLocationID int32 `json:"store_location_id"`
}

func (q *Queries) UpdateUserStoreRelationship(ctx context.Context, arg UpdateUserStoreRelationshipParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateUserStoreRelationship, arg.ID, arg.StoreLocationID)
	var id int32
	err := row.Scan(&id)
	return id, err
}
