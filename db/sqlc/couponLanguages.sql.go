// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: couponLanguages.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCouponLanguage = `-- name: CreateCouponLanguage :one
INSERT INTO coupon_languages (coupon_id, language_id, name, description, disclaimer)
VALUES ($1, $2, $3, $4, $5)
RETURNING id
`

type CreateCouponLanguageParams struct {
	CouponID    pgtype.Int4 `json:"coupon_id"`
	LanguageID  pgtype.Int4 `json:"language_id"`
	Name        string      `json:"name"`
	Description string      `json:"description"`
	Disclaimer  string      `json:"disclaimer"`
}

func (q *Queries) CreateCouponLanguage(ctx context.Context, arg CreateCouponLanguageParams) (int32, error) {
	row := q.db.QueryRow(ctx, createCouponLanguage,
		arg.CouponID,
		arg.LanguageID,
		arg.Name,
		arg.Description,
		arg.Disclaimer,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteCouponLanguage = `-- name: DeleteCouponLanguage :one
DELETE FROM coupon_languages WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteCouponLanguage(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteCouponLanguage, id)
	err := row.Scan(&id)
	return id, err
}

const selectAllCouponLanguages = `-- name: SelectAllCouponLanguages :many
SELECT id, coupon_id, language_id, name, description, disclaimer, created_at FROM coupon_languages
`

func (q *Queries) SelectAllCouponLanguages(ctx context.Context) ([]CouponLanguage, error) {
	rows, err := q.db.Query(ctx, selectAllCouponLanguages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CouponLanguage{}
	for rows.Next() {
		var i CouponLanguage
		if err := rows.Scan(
			&i.ID,
			&i.CouponID,
			&i.LanguageID,
			&i.Name,
			&i.Description,
			&i.Disclaimer,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
