// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: competitorLanguages.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCompetitorLanguage = `-- name: CreateCompetitorLanguage :one
INSERT INTO competitor_languages (competitor_id, language_id, name)
VALUES ($1, $2, $3)
RETURNING id
`

type CreateCompetitorLanguageParams struct {
	CompetitorID pgtype.Int4 `json:"competitor_id"`
	LanguageID   pgtype.Int4 `json:"language_id"`
	Name         string      `json:"name"`
}

func (q *Queries) CreateCompetitorLanguage(ctx context.Context, arg CreateCompetitorLanguageParams) (int32, error) {
	row := q.db.QueryRow(ctx, createCompetitorLanguage, arg.CompetitorID, arg.LanguageID, arg.Name)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteCompetitorLanguage = `-- name: DeleteCompetitorLanguage :one
DELETE FROM competitor_languages WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteCompetitorLanguage(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteCompetitorLanguage, id)
	err := row.Scan(&id)
	return id, err
}

const selectAllCompetitorLanguages = `-- name: SelectAllCompetitorLanguages :many
SELECT id, competitor_id, language_id, name, created_at FROM competitor_languages
`

func (q *Queries) SelectAllCompetitorLanguages(ctx context.Context) ([]CompetitorLanguage, error) {
	rows, err := q.db.Query(ctx, selectAllCompetitorLanguages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CompetitorLanguage{}
	for rows.Next() {
		var i CompetitorLanguage
		if err := rows.Scan(
			&i.ID,
			&i.CompetitorID,
			&i.LanguageID,
			&i.Name,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectCompetitorLanguages = `-- name: SelectCompetitorLanguages :one
SELECT id, competitor_id, language_id, name, created_at FROM competitor_languages WHERE id = $1
`

func (q *Queries) SelectCompetitorLanguages(ctx context.Context, id int32) (CompetitorLanguage, error) {
	row := q.db.QueryRow(ctx, selectCompetitorLanguages, id)
	var i CompetitorLanguage
	err := row.Scan(
		&i.ID,
		&i.CompetitorID,
		&i.LanguageID,
		&i.Name,
		&i.CreatedAt,
	)
	return i, err
}

const updateCompetitorLanguage = `-- name: UpdateCompetitorLanguage :one
UPDATE competitor_languages
SET name = $3
WHERE id = $1 AND competitor_id = $2
RETURNING id
`

type UpdateCompetitorLanguageParams struct {
	ID           int32       `json:"id"`
	CompetitorID pgtype.Int4 `json:"competitor_id"`
	Name         string      `json:"name"`
}

func (q *Queries) UpdateCompetitorLanguage(ctx context.Context, arg UpdateCompetitorLanguageParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateCompetitorLanguage, arg.ID, arg.CompetitorID, arg.Name)
	var id int32
	err := row.Scan(&id)
	return id, err
}
