// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: importFlows.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createImportFlow = `-- name: CreateImportFlow :one
INSERT INTO import_flows (
    file_name,
    no_rows,
    note,
    status
)
VALUES (
    $1,
    $2,
    $3,
    $4
)
RETURNING id
`

type CreateImportFlowParams struct {
	FileName string      `json:"file_name"`
	NoRows   pgtype.Int4 `json:"no_rows"`
	Note     string      `json:"note"`
	Status   string      `json:"status"`
}

func (q *Queries) CreateImportFlow(ctx context.Context, arg CreateImportFlowParams) (int32, error) {
	row := q.db.QueryRow(ctx, createImportFlow,
		arg.FileName,
		arg.NoRows,
		arg.Note,
		arg.Status,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteImportFlow = `-- name: DeleteImportFlow :one
DELETE FROM import_flows WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteImportFlow(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteImportFlow, id)
	err := row.Scan(&id)
	return id, err
}

const selectAllImportFlowByID = `-- name: SelectAllImportFlowByID :many
SELECT id, file_name, no_rows, created, modified, status, no_error, note, log_file, completed_file, created_at FROM import_flows
`

func (q *Queries) SelectAllImportFlowByID(ctx context.Context) ([]ImportFlow, error) {
	rows, err := q.db.Query(ctx, selectAllImportFlowByID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ImportFlow{}
	for rows.Next() {
		var i ImportFlow
		if err := rows.Scan(
			&i.ID,
			&i.FileName,
			&i.NoRows,
			&i.Created,
			&i.Modified,
			&i.Status,
			&i.NoError,
			&i.Note,
			&i.LogFile,
			&i.CompletedFile,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateImportFlow = `-- name: UpdateImportFlow :one
UPDATE import_flows
SET
    file_name = $2,
    no_rows = $3,
    note = $4,
    status = $5
WHERE id = $1
RETURNING id, file_name, no_rows, created, modified, status, no_error, note, log_file, completed_file, created_at
`

type UpdateImportFlowParams struct {
	ID       int32       `json:"id"`
	FileName string      `json:"file_name"`
	NoRows   pgtype.Int4 `json:"no_rows"`
	Note     string      `json:"note"`
	Status   string      `json:"status"`
}

func (q *Queries) UpdateImportFlow(ctx context.Context, arg UpdateImportFlowParams) (ImportFlow, error) {
	row := q.db.QueryRow(ctx, updateImportFlow,
		arg.ID,
		arg.FileName,
		arg.NoRows,
		arg.Note,
		arg.Status,
	)
	var i ImportFlow
	err := row.Scan(
		&i.ID,
		&i.FileName,
		&i.NoRows,
		&i.Created,
		&i.Modified,
		&i.Status,
		&i.NoError,
		&i.Note,
		&i.LogFile,
		&i.CompletedFile,
		&i.CreatedAt,
	)
	return i, err
}
