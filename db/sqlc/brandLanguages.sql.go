// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: brandLanguages.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBrandLanguage = `-- name: CreateBrandLanguage :one
INSERT INTO brands_languages (brand_id, language_id, name)
VALUES ($1, $2, $3)
RETURNING id
`

type CreateBrandLanguageParams struct {
	BrandID    pgtype.Int4 `json:"brand_id"`
	LanguageID pgtype.Int4 `json:"language_id"`
	Name       string      `json:"name"`
}

func (q *Queries) CreateBrandLanguage(ctx context.Context, arg CreateBrandLanguageParams) (int32, error) {
	row := q.db.QueryRow(ctx, createBrandLanguage, arg.BrandID, arg.LanguageID, arg.Name)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteBrandLanguage = `-- name: DeleteBrandLanguage :one
DELETE FROM brands_languages WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteBrandLanguage(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteBrandLanguage, id)
	err := row.Scan(&id)
	return id, err
}

const selectALLBrandLanguages = `-- name: SelectALLBrandLanguages :many
SELECT id, brand_id, language_id, name, created_at FROM brands_languages
`

func (q *Queries) SelectALLBrandLanguages(ctx context.Context) ([]BrandsLanguage, error) {
	rows, err := q.db.Query(ctx, selectALLBrandLanguages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BrandsLanguage{}
	for rows.Next() {
		var i BrandsLanguage
		if err := rows.Scan(
			&i.ID,
			&i.BrandID,
			&i.LanguageID,
			&i.Name,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectBrandLanguages = `-- name: SelectBrandLanguages :one
SELECT id, brand_id, language_id, name, created_at FROM brands_languages WHERE id = $1
`

func (q *Queries) SelectBrandLanguages(ctx context.Context, id int32) (BrandsLanguage, error) {
	row := q.db.QueryRow(ctx, selectBrandLanguages, id)
	var i BrandsLanguage
	err := row.Scan(
		&i.ID,
		&i.BrandID,
		&i.LanguageID,
		&i.Name,
		&i.CreatedAt,
	)
	return i, err
}

const updateBrandLanguage = `-- name: UpdateBrandLanguage :one
UPDATE brands_languages
SET name = $3
WHERE id = $1 AND brand_id = $2
RETURNING id
`

type UpdateBrandLanguageParams struct {
	ID      int32       `json:"id"`
	BrandID pgtype.Int4 `json:"brand_id"`
	Name    string      `json:"name"`
}

func (q *Queries) UpdateBrandLanguage(ctx context.Context, arg UpdateBrandLanguageParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateBrandLanguage, arg.ID, arg.BrandID, arg.Name)
	var id int32
	err := row.Scan(&id)
	return id, err
}
