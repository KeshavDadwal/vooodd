// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: stores.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createStore = `-- name: CreateStore :one
INSERT INTO stores (name, store_no, description, logo, phone_no, isdeleted, isblocked, user_id, icon)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id
`

type CreateStoreParams struct {
	Name        string      `json:"name"`
	StoreNo     pgtype.Text `json:"store_no"`
	Description string      `json:"description"`
	Logo        pgtype.Text `json:"logo"`
	PhoneNo     pgtype.Text `json:"phone_no"`
	Isdeleted   pgtype.Bool `json:"isdeleted"`
	Isblocked   pgtype.Bool `json:"isblocked"`
	UserID      pgtype.Int4 `json:"user_id"`
	Icon        pgtype.Text `json:"icon"`
}

func (q *Queries) CreateStore(ctx context.Context, arg CreateStoreParams) (int32, error) {
	row := q.db.QueryRow(ctx, createStore,
		arg.Name,
		arg.StoreNo,
		arg.Description,
		arg.Logo,
		arg.PhoneNo,
		arg.Isdeleted,
		arg.Isblocked,
		arg.UserID,
		arg.Icon,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteStore = `-- name: DeleteStore :one
DELETE FROM stores WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteStore(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteStore, id)
	err := row.Scan(&id)
	return id, err
}

const selectStores = `-- name: SelectStores :many
SELECT id, name, store_no, description, logo, phone_no, isdeleted, isblocked, user_id, icon, created_at FROM stores WHERE isdeleted = false AND isblocked = false
`

func (q *Queries) SelectStores(ctx context.Context) ([]Store, error) {
	rows, err := q.db.Query(ctx, selectStores)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Store{}
	for rows.Next() {
		var i Store
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.StoreNo,
			&i.Description,
			&i.Logo,
			&i.PhoneNo,
			&i.Isdeleted,
			&i.Isblocked,
			&i.UserID,
			&i.Icon,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStore = `-- name: UpdateStore :one
UPDATE stores
SET name = $2, store_no = $3, description = $4, logo = $5, phone_no = $6, isdeleted = $7, isblocked = $8, user_id = $9, icon = $10
WHERE id = $1
RETURNING id
`

type UpdateStoreParams struct {
	ID          int32       `json:"id"`
	Name        string      `json:"name"`
	StoreNo     pgtype.Text `json:"store_no"`
	Description string      `json:"description"`
	Logo        pgtype.Text `json:"logo"`
	PhoneNo     pgtype.Text `json:"phone_no"`
	Isdeleted   pgtype.Bool `json:"isdeleted"`
	Isblocked   pgtype.Bool `json:"isblocked"`
	UserID      pgtype.Int4 `json:"user_id"`
	Icon        pgtype.Text `json:"icon"`
}

func (q *Queries) UpdateStore(ctx context.Context, arg UpdateStoreParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateStore,
		arg.ID,
		arg.Name,
		arg.StoreNo,
		arg.Description,
		arg.Logo,
		arg.PhoneNo,
		arg.Isdeleted,
		arg.Isblocked,
		arg.UserID,
		arg.Icon,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
