// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: storeLocationHolidays.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createStoreLocationHoliday = `-- name: CreateStoreLocationHoliday :one
INSERT INTO store_location_holidays (
    store_location_id,
    name,
    start_date,
    end_date
)
VALUES (
    $1,
    $2,
    $3,
    $4
)
RETURNING id
`

type CreateStoreLocationHolidayParams struct {
	StoreLocationID int32       `json:"store_location_id"`
	Name            string      `json:"name"`
	StartDate       pgtype.Date `json:"start_date"`
	EndDate         pgtype.Date `json:"end_date"`
}

func (q *Queries) CreateStoreLocationHoliday(ctx context.Context, arg CreateStoreLocationHolidayParams) (int32, error) {
	row := q.db.QueryRow(ctx, createStoreLocationHoliday,
		arg.StoreLocationID,
		arg.Name,
		arg.StartDate,
		arg.EndDate,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteStoreLocationHoliday = `-- name: DeleteStoreLocationHoliday :one
DELETE FROM store_location_holidays WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteStoreLocationHoliday(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteStoreLocationHoliday, id)
	err := row.Scan(&id)
	return id, err
}

const selectStoreLocationHolidays = `-- name: SelectStoreLocationHolidays :many
SELECT id, store_location_id, name, start_date, end_date, created_at FROM store_location_holidays
`

func (q *Queries) SelectStoreLocationHolidays(ctx context.Context) ([]StoreLocationHoliday, error) {
	rows, err := q.db.Query(ctx, selectStoreLocationHolidays)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []StoreLocationHoliday{}
	for rows.Next() {
		var i StoreLocationHoliday
		if err := rows.Scan(
			&i.ID,
			&i.StoreLocationID,
			&i.Name,
			&i.StartDate,
			&i.EndDate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStoreLocationHoliday = `-- name: UpdateStoreLocationHoliday :one
UPDATE store_location_holidays
SET
    store_location_id = $2,
    name = $3,
    start_date = $4,
    end_date = $5
WHERE id = $1
RETURNING id, store_location_id, name, start_date, end_date, created_at
`

type UpdateStoreLocationHolidayParams struct {
	ID              int32       `json:"id"`
	StoreLocationID int32       `json:"store_location_id"`
	Name            string      `json:"name"`
	StartDate       pgtype.Date `json:"start_date"`
	EndDate         pgtype.Date `json:"end_date"`
}

func (q *Queries) UpdateStoreLocationHoliday(ctx context.Context, arg UpdateStoreLocationHolidayParams) (StoreLocationHoliday, error) {
	row := q.db.QueryRow(ctx, updateStoreLocationHoliday,
		arg.ID,
		arg.StoreLocationID,
		arg.Name,
		arg.StartDate,
		arg.EndDate,
	)
	var i StoreLocationHoliday
	err := row.Scan(
		&i.ID,
		&i.StoreLocationID,
		&i.Name,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
	)
	return i, err
}
