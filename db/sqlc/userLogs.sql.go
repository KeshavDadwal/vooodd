// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: userLogs.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUserLog = `-- name: CreateUserLog :one
INSERT INTO user_logs (
    user_id,
    mall_id,
    store_id,
    offer_id,
    name,
    text
)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
)
RETURNING id
`

type CreateUserLogParams struct {
	UserID  int32  `json:"user_id"`
	MallID  int32  `json:"mall_id"`
	StoreID int32  `json:"store_id"`
	OfferID int32  `json:"offer_id"`
	Name    string `json:"name"`
	Text    string `json:"text"`
}

func (q *Queries) CreateUserLog(ctx context.Context, arg CreateUserLogParams) (int32, error) {
	row := q.db.QueryRow(ctx, createUserLog,
		arg.UserID,
		arg.MallID,
		arg.StoreID,
		arg.OfferID,
		arg.Name,
		arg.Text,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteUserLogByUserId = `-- name: DeleteUserLogByUserId :one
DELETE FROM user_logs
WHERE
    user_id = $1
    RETURNING id
`

func (q *Queries) DeleteUserLogByUserId(ctx context.Context, userID int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteUserLogByUserId, userID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getUserLogsByUserId = `-- name: GetUserLogsByUserId :one
SELECT
    id,
    user_id,
    mall_id,
    store_id,
    offer_id,
    name,
    text,
    isblocked,
    isdeleted,
    created_at
FROM
    user_logs
WHERE
    user_id = $1
`

func (q *Queries) GetUserLogsByUserId(ctx context.Context, userID int32) (UserLog, error) {
	row := q.db.QueryRow(ctx, getUserLogsByUserId, userID)
	var i UserLog
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.MallID,
		&i.StoreID,
		&i.OfferID,
		&i.Name,
		&i.Text,
		&i.Isblocked,
		&i.Isdeleted,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserLog = `-- name: UpdateUserLog :one
UPDATE user_logs
SET
    mall_id = $2,
    store_id = $3,
    offer_id = $4,
    name = $5,
    text = $6,
    isblocked = $7,
    isdeleted = $8
WHERE
    user_id = $1
    RETURNING id
`

type UpdateUserLogParams struct {
	UserID    int32       `json:"user_id"`
	MallID    int32       `json:"mall_id"`
	StoreID   int32       `json:"store_id"`
	OfferID   int32       `json:"offer_id"`
	Name      string      `json:"name"`
	Text      string      `json:"text"`
	Isblocked pgtype.Bool `json:"isblocked"`
	Isdeleted pgtype.Bool `json:"isdeleted"`
}

func (q *Queries) UpdateUserLog(ctx context.Context, arg UpdateUserLogParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateUserLog,
		arg.UserID,
		arg.MallID,
		arg.StoreID,
		arg.OfferID,
		arg.Name,
		arg.Text,
		arg.Isblocked,
		arg.Isdeleted,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
