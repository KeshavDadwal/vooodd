// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: homePageIconLanguages.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createHomePageIconLanguage = `-- name: CreateHomePageIconLanguage :one
INSERT INTO home_page_icon_languages (home_page_icon_id, language_id, name)
VALUES ($1, $2, $3)
RETURNING id
`

type CreateHomePageIconLanguageParams struct {
	HomePageIconID pgtype.Int4 `json:"home_page_icon_id"`
	LanguageID     pgtype.Int4 `json:"language_id"`
	Name           pgtype.Text `json:"name"`
}

func (q *Queries) CreateHomePageIconLanguage(ctx context.Context, arg CreateHomePageIconLanguageParams) (int32, error) {
	row := q.db.QueryRow(ctx, createHomePageIconLanguage, arg.HomePageIconID, arg.LanguageID, arg.Name)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteHomePageIconLanguage = `-- name: DeleteHomePageIconLanguage :one
DELETE FROM home_page_icon_languages WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteHomePageIconLanguage(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteHomePageIconLanguage, id)
	err := row.Scan(&id)
	return id, err
}

const selectAllHomePageIconLanguages = `-- name: SelectAllHomePageIconLanguages :many
SELECT id, home_page_icon_id, language_id, name, created_at FROM home_page_icon_languages
`

func (q *Queries) SelectAllHomePageIconLanguages(ctx context.Context) ([]HomePageIconLanguage, error) {
	rows, err := q.db.Query(ctx, selectAllHomePageIconLanguages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []HomePageIconLanguage{}
	for rows.Next() {
		var i HomePageIconLanguage
		if err := rows.Scan(
			&i.ID,
			&i.HomePageIconID,
			&i.LanguageID,
			&i.Name,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateHomePageIconLanguage = `-- name: UpdateHomePageIconLanguage :one
UPDATE home_page_icon_languages
SET
    home_page_icon_id = $2,
    language_id = $3,
    name = $4
WHERE id = $1
RETURNING id
`

type UpdateHomePageIconLanguageParams struct {
	ID             int32       `json:"id"`
	HomePageIconID pgtype.Int4 `json:"home_page_icon_id"`
	LanguageID     pgtype.Int4 `json:"language_id"`
	Name           pgtype.Text `json:"name"`
}

func (q *Queries) UpdateHomePageIconLanguage(ctx context.Context, arg UpdateHomePageIconLanguageParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateHomePageIconLanguage,
		arg.ID,
		arg.HomePageIconID,
		arg.LanguageID,
		arg.Name,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
