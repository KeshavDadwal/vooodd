// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: mallLanguages.sql

package db

import (
	"context"
)

const createMallLanguage = `-- name: CreateMallLanguage :one
INSERT INTO mall_languages (
    mall_id,
    language_id,
    name,
    address,
    city,
    state,
    zip,
    phone_no
)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8
)
RETURNING id
`

type CreateMallLanguageParams struct {
	MallID     int32  `json:"mall_id"`
	LanguageID int32  `json:"language_id"`
	Name       string `json:"name"`
	Address    string `json:"address"`
	City       string `json:"city"`
	State      string `json:"state"`
	Zip        string `json:"zip"`
	PhoneNo    string `json:"phone_no"`
}

func (q *Queries) CreateMallLanguage(ctx context.Context, arg CreateMallLanguageParams) (int32, error) {
	row := q.db.QueryRow(ctx, createMallLanguage,
		arg.MallID,
		arg.LanguageID,
		arg.Name,
		arg.Address,
		arg.City,
		arg.State,
		arg.Zip,
		arg.PhoneNo,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteMallLanguage = `-- name: DeleteMallLanguage :one
DELETE FROM mall_languages WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteMallLanguage(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteMallLanguage, id)
	err := row.Scan(&id)
	return id, err
}

const selectMallLanguages = `-- name: SelectMallLanguages :many
SELECT id, mall_id, language_id, name, address, city, state, zip, phone_no, created_at FROM mall_languages
`

func (q *Queries) SelectMallLanguages(ctx context.Context) ([]MallLanguage, error) {
	rows, err := q.db.Query(ctx, selectMallLanguages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MallLanguage{}
	for rows.Next() {
		var i MallLanguage
		if err := rows.Scan(
			&i.ID,
			&i.MallID,
			&i.LanguageID,
			&i.Name,
			&i.Address,
			&i.City,
			&i.State,
			&i.Zip,
			&i.PhoneNo,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMallLanguage = `-- name: UpdateMallLanguage :one
UPDATE mall_languages
SET
    mall_id = $2,
    language_id = $3,
    name = $4,
    address = $5,
    city = $6,
    state = $7,
    zip = $8,
    phone_no = $9
WHERE id = $1
RETURNING id, mall_id, language_id, name, address, city, state, zip, phone_no, created_at
`

type UpdateMallLanguageParams struct {
	ID         int32  `json:"id"`
	MallID     int32  `json:"mall_id"`
	LanguageID int32  `json:"language_id"`
	Name       string `json:"name"`
	Address    string `json:"address"`
	City       string `json:"city"`
	State      string `json:"state"`
	Zip        string `json:"zip"`
	PhoneNo    string `json:"phone_no"`
}

func (q *Queries) UpdateMallLanguage(ctx context.Context, arg UpdateMallLanguageParams) (MallLanguage, error) {
	row := q.db.QueryRow(ctx, updateMallLanguage,
		arg.ID,
		arg.MallID,
		arg.LanguageID,
		arg.Name,
		arg.Address,
		arg.City,
		arg.State,
		arg.Zip,
		arg.PhoneNo,
	)
	var i MallLanguage
	err := row.Scan(
		&i.ID,
		&i.MallID,
		&i.LanguageID,
		&i.Name,
		&i.Address,
		&i.City,
		&i.State,
		&i.Zip,
		&i.PhoneNo,
		&i.CreatedAt,
	)
	return i, err
}
