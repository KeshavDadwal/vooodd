// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: storeNameCategories.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createStoreNameCategory = `-- name: CreateStoreNameCategory :one
INSERT INTO store_name_categories (
    parent_id,
    lft,
    rght,
    name
)
VALUES (
    $1,
    $2,
    $3,
    $4
)
RETURNING id
`

type CreateStoreNameCategoryParams struct {
	ParentID pgtype.Int4 `json:"parent_id"`
	Lft      pgtype.Int4 `json:"lft"`
	Rght     pgtype.Int4 `json:"rght"`
	Name     pgtype.Text `json:"name"`
}

func (q *Queries) CreateStoreNameCategory(ctx context.Context, arg CreateStoreNameCategoryParams) (int32, error) {
	row := q.db.QueryRow(ctx, createStoreNameCategory,
		arg.ParentID,
		arg.Lft,
		arg.Rght,
		arg.Name,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteStoreNameCategory = `-- name: DeleteStoreNameCategory :one
DELETE FROM store_name_categories WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteStoreNameCategory(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteStoreNameCategory, id)
	err := row.Scan(&id)
	return id, err
}

const selectStoreNameCategories = `-- name: SelectStoreNameCategories :many
SELECT id, parent_id, lft, rght, name, created_at FROM store_name_categories
`

func (q *Queries) SelectStoreNameCategories(ctx context.Context) ([]StoreNameCategory, error) {
	rows, err := q.db.Query(ctx, selectStoreNameCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []StoreNameCategory{}
	for rows.Next() {
		var i StoreNameCategory
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.Lft,
			&i.Rght,
			&i.Name,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStoreNameCategory = `-- name: UpdateStoreNameCategory :one
UPDATE store_name_categories
SET
    parent_id = $2,
    lft = $3,
    rght = $4,
    name = $5
WHERE id = $1
RETURNING id
`

type UpdateStoreNameCategoryParams struct {
	ID       int32       `json:"id"`
	ParentID pgtype.Int4 `json:"parent_id"`
	Lft      pgtype.Int4 `json:"lft"`
	Rght     pgtype.Int4 `json:"rght"`
	Name     pgtype.Text `json:"name"`
}

func (q *Queries) UpdateStoreNameCategory(ctx context.Context, arg UpdateStoreNameCategoryParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateStoreNameCategory,
		arg.ID,
		arg.ParentID,
		arg.Lft,
		arg.Rght,
		arg.Name,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
