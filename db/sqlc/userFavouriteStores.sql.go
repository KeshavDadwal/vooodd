// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: userFavouriteStores.sql

package db

import (
	"context"
)

const createUserFavoriteStore = `-- name: CreateUserFavoriteStore :one
INSERT INTO user_favourite_stores (
    user_id,
    store_id
)
VALUES (
    $1,
    $2
)
RETURNING id
`

type CreateUserFavoriteStoreParams struct {
	UserID  int32 `json:"user_id"`
	StoreID int32 `json:"store_id"`
}

func (q *Queries) CreateUserFavoriteStore(ctx context.Context, arg CreateUserFavoriteStoreParams) (int32, error) {
	row := q.db.QueryRow(ctx, createUserFavoriteStore, arg.UserID, arg.StoreID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteUserFavoriteStore = `-- name: DeleteUserFavoriteStore :one
DELETE FROM user_favourite_stores WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteUserFavoriteStore(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteUserFavoriteStore, id)
	err := row.Scan(&id)
	return id, err
}

const selectUserFavoriteStores = `-- name: SelectUserFavoriteStores :many
SELECT id, user_id, store_id, isdeleted, isblocked, created_at FROM user_favourite_stores WHERE user_id = $1
`

func (q *Queries) SelectUserFavoriteStores(ctx context.Context, userID int32) ([]UserFavouriteStore, error) {
	rows, err := q.db.Query(ctx, selectUserFavoriteStores, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserFavouriteStore{}
	for rows.Next() {
		var i UserFavouriteStore
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.StoreID,
			&i.Isdeleted,
			&i.Isblocked,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserFavoriteStore = `-- name: UpdateUserFavoriteStore :one
UPDATE user_favourite_stores
SET
    store_id = $2
WHERE id = $1
RETURNING id
`

type UpdateUserFavoriteStoreParams struct {
	ID      int32 `json:"id"`
	StoreID int32 `json:"store_id"`
}

func (q *Queries) UpdateUserFavoriteStore(ctx context.Context, arg UpdateUserFavoriteStoreParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateUserFavoriteStore, arg.ID, arg.StoreID)
	var id int32
	err := row.Scan(&id)
	return id, err
}
