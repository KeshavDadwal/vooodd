// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: contentMangementBanners.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createContentManagementBanner = `-- name: CreateContentManagementBanner :one
INSERT INTO content_management_banners (content_management_id, banner, banner_text, banner_link)
VALUES ($1, $2, $3, $4)
RETURNING id
`

type CreateContentManagementBannerParams struct {
	ContentManagementID pgtype.Int4 `json:"content_management_id"`
	Banner              string      `json:"banner"`
	BannerText          string      `json:"banner_text"`
	BannerLink          pgtype.Text `json:"banner_link"`
}

func (q *Queries) CreateContentManagementBanner(ctx context.Context, arg CreateContentManagementBannerParams) (int32, error) {
	row := q.db.QueryRow(ctx, createContentManagementBanner,
		arg.ContentManagementID,
		arg.Banner,
		arg.BannerText,
		arg.BannerLink,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteContentManagementBanner = `-- name: DeleteContentManagementBanner :one
DELETE FROM content_management_banners WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteContentManagementBanner(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteContentManagementBanner, id)
	err := row.Scan(&id)
	return id, err
}

const selectAllContentManagementBanners = `-- name: SelectAllContentManagementBanners :many
SELECT id, content_management_id, banner, banner_text, banner_link, created_at FROM content_management_banners
`

func (q *Queries) SelectAllContentManagementBanners(ctx context.Context) ([]ContentManagementBanner, error) {
	rows, err := q.db.Query(ctx, selectAllContentManagementBanners)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ContentManagementBanner{}
	for rows.Next() {
		var i ContentManagementBanner
		if err := rows.Scan(
			&i.ID,
			&i.ContentManagementID,
			&i.Banner,
			&i.BannerText,
			&i.BannerLink,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectContentManagementBanners = `-- name: SelectContentManagementBanners :one
SELECT id, content_management_id, banner, banner_text, banner_link, created_at FROM content_management_banners WHERE id = $1
`

func (q *Queries) SelectContentManagementBanners(ctx context.Context, id int32) (ContentManagementBanner, error) {
	row := q.db.QueryRow(ctx, selectContentManagementBanners, id)
	var i ContentManagementBanner
	err := row.Scan(
		&i.ID,
		&i.ContentManagementID,
		&i.Banner,
		&i.BannerText,
		&i.BannerLink,
		&i.CreatedAt,
	)
	return i, err
}

const updateContentManagementBanner = `-- name: UpdateContentManagementBanner :one
UPDATE content_management_banners
SET banner = $2, banner_text = $3, banner_link = $4
WHERE id = $1
RETURNING id
`

type UpdateContentManagementBannerParams struct {
	ID         int32       `json:"id"`
	Banner     string      `json:"banner"`
	BannerText string      `json:"banner_text"`
	BannerLink pgtype.Text `json:"banner_link"`
}

func (q *Queries) UpdateContentManagementBanner(ctx context.Context, arg UpdateContentManagementBannerParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateContentManagementBanner,
		arg.ID,
		arg.Banner,
		arg.BannerText,
		arg.BannerLink,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
