// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: zones.sql

package db

import (
	"context"
)

const createZone = `-- name: CreateZone :one
INSERT INTO zones (
    name,
    state
)
VALUES (
    $1,
    $2
)
RETURNING id
`

type CreateZoneParams struct {
	Name  string `json:"name"`
	State string `json:"state"`
}

func (q *Queries) CreateZone(ctx context.Context, arg CreateZoneParams) (int32, error) {
	row := q.db.QueryRow(ctx, createZone, arg.Name, arg.State)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteZone = `-- name: DeleteZone :one
DELETE FROM zones WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteZone(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteZone, id)
	err := row.Scan(&id)
	return id, err
}

const selectZones = `-- name: SelectZones :many
SELECT id, name, state, isdeleted, isblocked, created_at FROM zones
`

func (q *Queries) SelectZones(ctx context.Context) ([]Zone, error) {
	rows, err := q.db.Query(ctx, selectZones)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Zone{}
	for rows.Next() {
		var i Zone
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.State,
			&i.Isdeleted,
			&i.Isblocked,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateZone = `-- name: UpdateZone :one
UPDATE zones
SET
    name = $2,
    state = $3
WHERE id = $1
RETURNING id, name, state, isdeleted, isblocked, created_at
`

type UpdateZoneParams struct {
	ID    int32  `json:"id"`
	Name  string `json:"name"`
	State string `json:"state"`
}

func (q *Queries) UpdateZone(ctx context.Context, arg UpdateZoneParams) (Zone, error) {
	row := q.db.QueryRow(ctx, updateZone, arg.ID, arg.Name, arg.State)
	var i Zone
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.State,
		&i.Isdeleted,
		&i.Isblocked,
		&i.CreatedAt,
	)
	return i, err
}
