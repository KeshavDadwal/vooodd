// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: storeCatgories.sql

package db

import (
	"context"
)

const createStoreCategory = `-- name: CreateStoreCategory :one
INSERT INTO store_categories (
    deal_id,
    store_id
)
VALUES (
    $1,
    $2
)
RETURNING id
`

type CreateStoreCategoryParams struct {
	DealID  int32 `json:"deal_id"`
	StoreID int32 `json:"store_id"`
}

func (q *Queries) CreateStoreCategory(ctx context.Context, arg CreateStoreCategoryParams) (int32, error) {
	row := q.db.QueryRow(ctx, createStoreCategory, arg.DealID, arg.StoreID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteStoreCategory = `-- name: DeleteStoreCategory :one
DELETE FROM store_categories WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteStoreCategory(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteStoreCategory, id)
	err := row.Scan(&id)
	return id, err
}

const selectStoreCategories = `-- name: SelectStoreCategories :many
SELECT id, deal_id, store_id, created_at FROM store_categories
`

func (q *Queries) SelectStoreCategories(ctx context.Context) ([]StoreCategory, error) {
	rows, err := q.db.Query(ctx, selectStoreCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []StoreCategory{}
	for rows.Next() {
		var i StoreCategory
		if err := rows.Scan(
			&i.ID,
			&i.DealID,
			&i.StoreID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStoreCategory = `-- name: UpdateStoreCategory :one
UPDATE store_categories
SET
    deal_id = $2,
    store_id = $3
WHERE id = $1
RETURNING id
`

type UpdateStoreCategoryParams struct {
	ID      int32 `json:"id"`
	DealID  int32 `json:"deal_id"`
	StoreID int32 `json:"store_id"`
}

func (q *Queries) UpdateStoreCategory(ctx context.Context, arg UpdateStoreCategoryParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateStoreCategory, arg.ID, arg.DealID, arg.StoreID)
	var id int32
	err := row.Scan(&id)
	return id, err
}
