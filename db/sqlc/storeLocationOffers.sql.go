// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: storeLocationOffers.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createStoreLocationOffer = `-- name: CreateStoreLocationOffer :one
INSERT INTO store_location_offers (
    store_location_id,
    product_id,
    offer_id,
    price,
    offered_price,
    is_percent,
    start_date,
    end_date,
    sequence,
    isblocked,
    isdeleted,
    priority,
    weight,
    unit_id
)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14
)
RETURNING id
`

type CreateStoreLocationOfferParams struct {
	StoreLocationID int32          `json:"store_location_id"`
	ProductID       int32          `json:"product_id"`
	OfferID         int32          `json:"offer_id"`
	Price           pgtype.Numeric `json:"price"`
	OfferedPrice    pgtype.Numeric `json:"offered_price"`
	IsPercent       pgtype.Bool    `json:"is_percent"`
	StartDate       pgtype.Date    `json:"start_date"`
	EndDate         pgtype.Date    `json:"end_date"`
	Sequence        pgtype.Int4    `json:"sequence"`
	Isblocked       pgtype.Bool    `json:"isblocked"`
	Isdeleted       pgtype.Bool    `json:"isdeleted"`
	Priority        pgtype.Bool    `json:"priority"`
	Weight          pgtype.Text    `json:"weight"`
	UnitID          int32          `json:"unit_id"`
}

func (q *Queries) CreateStoreLocationOffer(ctx context.Context, arg CreateStoreLocationOfferParams) (int32, error) {
	row := q.db.QueryRow(ctx, createStoreLocationOffer,
		arg.StoreLocationID,
		arg.ProductID,
		arg.OfferID,
		arg.Price,
		arg.OfferedPrice,
		arg.IsPercent,
		arg.StartDate,
		arg.EndDate,
		arg.Sequence,
		arg.Isblocked,
		arg.Isdeleted,
		arg.Priority,
		arg.Weight,
		arg.UnitID,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteStoreLocationOffer = `-- name: DeleteStoreLocationOffer :one
DELETE FROM store_location_offers WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteStoreLocationOffer(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteStoreLocationOffer, id)
	err := row.Scan(&id)
	return id, err
}

const selectStoreLocationOffers = `-- name: SelectStoreLocationOffers :many
SELECT id, store_location_id, product_id, offer_id, price, offered_price, is_percent, start_date, end_date, sequence, isblocked, isdeleted, priority, weight, unit_id, created_at FROM store_location_offers
`

func (q *Queries) SelectStoreLocationOffers(ctx context.Context) ([]StoreLocationOffer, error) {
	rows, err := q.db.Query(ctx, selectStoreLocationOffers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []StoreLocationOffer{}
	for rows.Next() {
		var i StoreLocationOffer
		if err := rows.Scan(
			&i.ID,
			&i.StoreLocationID,
			&i.ProductID,
			&i.OfferID,
			&i.Price,
			&i.OfferedPrice,
			&i.IsPercent,
			&i.StartDate,
			&i.EndDate,
			&i.Sequence,
			&i.Isblocked,
			&i.Isdeleted,
			&i.Priority,
			&i.Weight,
			&i.UnitID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStoreLocationOffer = `-- name: UpdateStoreLocationOffer :one
UPDATE store_location_offers
SET
    store_location_id = $2,
    product_id = $3,
    offer_id = $4,
    price = $5,
    offered_price = $6,
    is_percent = $7,
    start_date = $8,
    end_date = $9,
    sequence = $10,
    isblocked = $11,
    isdeleted = $12,
    priority = $13,
    weight = $14,
    unit_id = $15
WHERE id = $1
RETURNING id, store_location_id, product_id, offer_id, price, offered_price, is_percent, start_date, end_date, sequence, isblocked, isdeleted, priority, weight, unit_id, created_at
`

type UpdateStoreLocationOfferParams struct {
	ID              int32          `json:"id"`
	StoreLocationID int32          `json:"store_location_id"`
	ProductID       int32          `json:"product_id"`
	OfferID         int32          `json:"offer_id"`
	Price           pgtype.Numeric `json:"price"`
	OfferedPrice    pgtype.Numeric `json:"offered_price"`
	IsPercent       pgtype.Bool    `json:"is_percent"`
	StartDate       pgtype.Date    `json:"start_date"`
	EndDate         pgtype.Date    `json:"end_date"`
	Sequence        pgtype.Int4    `json:"sequence"`
	Isblocked       pgtype.Bool    `json:"isblocked"`
	Isdeleted       pgtype.Bool    `json:"isdeleted"`
	Priority        pgtype.Bool    `json:"priority"`
	Weight          pgtype.Text    `json:"weight"`
	UnitID          int32          `json:"unit_id"`
}

func (q *Queries) UpdateStoreLocationOffer(ctx context.Context, arg UpdateStoreLocationOfferParams) (StoreLocationOffer, error) {
	row := q.db.QueryRow(ctx, updateStoreLocationOffer,
		arg.ID,
		arg.StoreLocationID,
		arg.ProductID,
		arg.OfferID,
		arg.Price,
		arg.OfferedPrice,
		arg.IsPercent,
		arg.StartDate,
		arg.EndDate,
		arg.Sequence,
		arg.Isblocked,
		arg.Isdeleted,
		arg.Priority,
		arg.Weight,
		arg.UnitID,
	)
	var i StoreLocationOffer
	err := row.Scan(
		&i.ID,
		&i.StoreLocationID,
		&i.ProductID,
		&i.OfferID,
		&i.Price,
		&i.OfferedPrice,
		&i.IsPercent,
		&i.StartDate,
		&i.EndDate,
		&i.Sequence,
		&i.Isblocked,
		&i.Isdeleted,
		&i.Priority,
		&i.Weight,
		&i.UnitID,
		&i.CreatedAt,
	)
	return i, err
}
