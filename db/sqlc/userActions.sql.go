// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: userActions.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUserAction = `-- name: CreateUserAction :one
INSERT INTO user_actions (
    user_id,
    save_type,
    tablename,
    autoincrement_id,
    fieldname,
    value,
    old_value,
    note
)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8
)
RETURNING id
`

type CreateUserActionParams struct {
	UserID          int32       `json:"user_id"`
	SaveType        string      `json:"save_type"`
	Tablename       string      `json:"tablename"`
	AutoincrementID pgtype.Int4 `json:"autoincrement_id"`
	Fieldname       string      `json:"fieldname"`
	Value           string      `json:"value"`
	OldValue        pgtype.Text `json:"old_value"`
	Note            string      `json:"note"`
}

func (q *Queries) CreateUserAction(ctx context.Context, arg CreateUserActionParams) (int32, error) {
	row := q.db.QueryRow(ctx, createUserAction,
		arg.UserID,
		arg.SaveType,
		arg.Tablename,
		arg.AutoincrementID,
		arg.Fieldname,
		arg.Value,
		arg.OldValue,
		arg.Note,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteUserActionsByUserId = `-- name: DeleteUserActionsByUserId :one
DELETE FROM user_actions
WHERE
    user_id = $1
    RETURNING id
`

func (q *Queries) DeleteUserActionsByUserId(ctx context.Context, userID int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteUserActionsByUserId, userID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getUserActionsByUserId = `-- name: GetUserActionsByUserId :many
SELECT
    id,
    user_id,
    save_type,
    tablename,
    autoincrement_id,
    fieldname,
    value,
    old_value,
    note,
    created_at
FROM
    user_actions
WHERE
    user_id = $1
`

func (q *Queries) GetUserActionsByUserId(ctx context.Context, userID int32) ([]UserAction, error) {
	rows, err := q.db.Query(ctx, getUserActionsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserAction{}
	for rows.Next() {
		var i UserAction
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.SaveType,
			&i.Tablename,
			&i.AutoincrementID,
			&i.Fieldname,
			&i.Value,
			&i.OldValue,
			&i.Note,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserAction = `-- name: UpdateUserAction :one
UPDATE user_actions
SET
    save_type = $2,
    tablename = $3,
    autoincrement_id = $4,
    fieldname = $5,
    value = $6,
    old_value = $7,
    note = $8
WHERE
    user_id = $1
    RETURNING id
`

type UpdateUserActionParams struct {
	UserID          int32       `json:"user_id"`
	SaveType        string      `json:"save_type"`
	Tablename       string      `json:"tablename"`
	AutoincrementID pgtype.Int4 `json:"autoincrement_id"`
	Fieldname       string      `json:"fieldname"`
	Value           string      `json:"value"`
	OldValue        pgtype.Text `json:"old_value"`
	Note            string      `json:"note"`
}

func (q *Queries) UpdateUserAction(ctx context.Context, arg UpdateUserActionParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateUserAction,
		arg.UserID,
		arg.SaveType,
		arg.Tablename,
		arg.AutoincrementID,
		arg.Fieldname,
		arg.Value,
		arg.OldValue,
		arg.Note,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
