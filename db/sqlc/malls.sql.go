// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: malls.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMall = `-- name: CreateMall :one
INSERT INTO malls (
    parent_id,
    name,
    mall_no,
    address,
    city,
    state,
    country_id,
    zip,
    phone_no,
    latitude,
    longitude,
    banner_path,
    isdeleted,
    isblocked,
    timezone,
    monday_start,
    monday_end,
    tuesday_start,
    tuesday_end,
    wednesday_start,
    wednesday_end,
    thursday_start,
    thursday_end,
    friday_start,
    friday_end,
    saturday_start,
    saturday_end,
    sunday_start,
    sunday_end,
    user_id,
    map,
    is_holiday,
    holiday_start_date,
    holiday_end_date,
    holiday_start_time,
    holiday_end_time,
    zone_id,
    ad_link
)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15,
    $16,
    $17,
    $18,
    $19,
    $20,
    $21,
    $22,
    $23,
    $24,
    $25,
    $26,
    $27,
    $28,
    $29,
    $30,
    $31,
    $32,
    $33,
    $34,
    $35,
    $36,
    $37,
    $38
)
RETURNING id
`

type CreateMallParams struct {
	ParentID         pgtype.Int4 `json:"parent_id"`
	Name             string      `json:"name"`
	MallNo           pgtype.Text `json:"mall_no"`
	Address          string      `json:"address"`
	City             string      `json:"city"`
	State            string      `json:"state"`
	CountryID        int32       `json:"country_id"`
	Zip              string      `json:"zip"`
	PhoneNo          pgtype.Text `json:"phone_no"`
	Latitude         pgtype.Text `json:"latitude"`
	Longitude        pgtype.Text `json:"longitude"`
	BannerPath       pgtype.Text `json:"banner_path"`
	Isdeleted        pgtype.Bool `json:"isdeleted"`
	Isblocked        pgtype.Bool `json:"isblocked"`
	Timezone         pgtype.Text `json:"timezone"`
	MondayStart      pgtype.Time `json:"monday_start"`
	MondayEnd        pgtype.Time `json:"monday_end"`
	TuesdayStart     pgtype.Time `json:"tuesday_start"`
	TuesdayEnd       pgtype.Time `json:"tuesday_end"`
	WednesdayStart   pgtype.Time `json:"wednesday_start"`
	WednesdayEnd     pgtype.Time `json:"wednesday_end"`
	ThursdayStart    pgtype.Time `json:"thursday_start"`
	ThursdayEnd      pgtype.Time `json:"thursday_end"`
	FridayStart      pgtype.Time `json:"friday_start"`
	FridayEnd        pgtype.Time `json:"friday_end"`
	SaturdayStart    pgtype.Time `json:"saturday_start"`
	SaturdayEnd      pgtype.Time `json:"saturday_end"`
	SundayStart      pgtype.Time `json:"sunday_start"`
	SundayEnd        pgtype.Time `json:"sunday_end"`
	UserID           pgtype.Int4 `json:"user_id"`
	Map              pgtype.Text `json:"map"`
	IsHoliday        pgtype.Bool `json:"is_holiday"`
	HolidayStartDate pgtype.Date `json:"holiday_start_date"`
	HolidayEndDate   pgtype.Date `json:"holiday_end_date"`
	HolidayStartTime pgtype.Time `json:"holiday_start_time"`
	HolidayEndTime   pgtype.Time `json:"holiday_end_time"`
	ZoneID           pgtype.Int4 `json:"zone_id"`
	AdLink           pgtype.Text `json:"ad_link"`
}

func (q *Queries) CreateMall(ctx context.Context, arg CreateMallParams) (int32, error) {
	row := q.db.QueryRow(ctx, createMall,
		arg.ParentID,
		arg.Name,
		arg.MallNo,
		arg.Address,
		arg.City,
		arg.State,
		arg.CountryID,
		arg.Zip,
		arg.PhoneNo,
		arg.Latitude,
		arg.Longitude,
		arg.BannerPath,
		arg.Isdeleted,
		arg.Isblocked,
		arg.Timezone,
		arg.MondayStart,
		arg.MondayEnd,
		arg.TuesdayStart,
		arg.TuesdayEnd,
		arg.WednesdayStart,
		arg.WednesdayEnd,
		arg.ThursdayStart,
		arg.ThursdayEnd,
		arg.FridayStart,
		arg.FridayEnd,
		arg.SaturdayStart,
		arg.SaturdayEnd,
		arg.SundayStart,
		arg.SundayEnd,
		arg.UserID,
		arg.Map,
		arg.IsHoliday,
		arg.HolidayStartDate,
		arg.HolidayEndDate,
		arg.HolidayStartTime,
		arg.HolidayEndTime,
		arg.ZoneID,
		arg.AdLink,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteMall = `-- name: DeleteMall :one
DELETE FROM malls WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteMall(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteMall, id)
	err := row.Scan(&id)
	return id, err
}

const selectMalls = `-- name: SelectMalls :many
SELECT id, parent_id, name, mall_no, address, city, state, country_id, zip, phone_no, latitude, longitude, banner_path, isdeleted, isblocked, timezone, monday_start, monday_end, tuesday_start, tuesday_end, wednesday_start, wednesday_end, thursday_start, thursday_end, friday_start, friday_end, saturday_start, saturday_end, sunday_start, sunday_end, user_id, map, is_holiday, holiday_start_date, holiday_end_date, holiday_start_time, holiday_end_time, zone_id, ad_link, created_at FROM malls
`

func (q *Queries) SelectMalls(ctx context.Context) ([]Mall, error) {
	rows, err := q.db.Query(ctx, selectMalls)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Mall{}
	for rows.Next() {
		var i Mall
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.Name,
			&i.MallNo,
			&i.Address,
			&i.City,
			&i.State,
			&i.CountryID,
			&i.Zip,
			&i.PhoneNo,
			&i.Latitude,
			&i.Longitude,
			&i.BannerPath,
			&i.Isdeleted,
			&i.Isblocked,
			&i.Timezone,
			&i.MondayStart,
			&i.MondayEnd,
			&i.TuesdayStart,
			&i.TuesdayEnd,
			&i.WednesdayStart,
			&i.WednesdayEnd,
			&i.ThursdayStart,
			&i.ThursdayEnd,
			&i.FridayStart,
			&i.FridayEnd,
			&i.SaturdayStart,
			&i.SaturdayEnd,
			&i.SundayStart,
			&i.SundayEnd,
			&i.UserID,
			&i.Map,
			&i.IsHoliday,
			&i.HolidayStartDate,
			&i.HolidayEndDate,
			&i.HolidayStartTime,
			&i.HolidayEndTime,
			&i.ZoneID,
			&i.AdLink,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMall = `-- name: UpdateMall :one
UPDATE malls
SET
    parent_id = $2,
    name = $3,
    mall_no = $4,
    address = $5,
    city = $6,
    state = $7,
    country_id = $8,
    zip = $9,
    phone_no = $10,
    latitude = $11,
    longitude = $12,
    banner_path = $13,
    timezone = $14,
    monday_start = $15,
    monday_end = $16,
    tuesday_start = $17,
    tuesday_end = $18,
    wednesday_start = $19,
    wednesday_end = $20,
    thursday_start = $21,
    thursday_end = $22,
    friday_start = $23,
    friday_end = $24,
    saturday_start = $25,
    saturday_end = $26,
    sunday_start = $27,
    sunday_end = $28,
    user_id = $29,
    map = $30,
    is_holiday = $31,
    holiday_start_date = $32,
    holiday_end_date = $33,
    holiday_start_time = $34,
    holiday_end_time = $35,
    zone_id = $36,
    ad_link = $37
WHERE id = $1
RETURNING id, parent_id, name, mall_no, address, city, state, country_id, zip, phone_no, latitude, longitude, banner_path, isdeleted, isblocked, timezone, monday_start, monday_end, tuesday_start, tuesday_end, wednesday_start, wednesday_end, thursday_start, thursday_end, friday_start, friday_end, saturday_start, saturday_end, sunday_start, sunday_end, user_id, map, is_holiday, holiday_start_date, holiday_end_date, holiday_start_time, holiday_end_time, zone_id, ad_link, created_at
`

type UpdateMallParams struct {
	ID               int32       `json:"id"`
	ParentID         pgtype.Int4 `json:"parent_id"`
	Name             string      `json:"name"`
	MallNo           pgtype.Text `json:"mall_no"`
	Address          string      `json:"address"`
	City             string      `json:"city"`
	State            string      `json:"state"`
	CountryID        int32       `json:"country_id"`
	Zip              string      `json:"zip"`
	PhoneNo          pgtype.Text `json:"phone_no"`
	Latitude         pgtype.Text `json:"latitude"`
	Longitude        pgtype.Text `json:"longitude"`
	BannerPath       pgtype.Text `json:"banner_path"`
	Timezone         pgtype.Text `json:"timezone"`
	MondayStart      pgtype.Time `json:"monday_start"`
	MondayEnd        pgtype.Time `json:"monday_end"`
	TuesdayStart     pgtype.Time `json:"tuesday_start"`
	TuesdayEnd       pgtype.Time `json:"tuesday_end"`
	WednesdayStart   pgtype.Time `json:"wednesday_start"`
	WednesdayEnd     pgtype.Time `json:"wednesday_end"`
	ThursdayStart    pgtype.Time `json:"thursday_start"`
	ThursdayEnd      pgtype.Time `json:"thursday_end"`
	FridayStart      pgtype.Time `json:"friday_start"`
	FridayEnd        pgtype.Time `json:"friday_end"`
	SaturdayStart    pgtype.Time `json:"saturday_start"`
	SaturdayEnd      pgtype.Time `json:"saturday_end"`
	SundayStart      pgtype.Time `json:"sunday_start"`
	SundayEnd        pgtype.Time `json:"sunday_end"`
	UserID           pgtype.Int4 `json:"user_id"`
	Map              pgtype.Text `json:"map"`
	IsHoliday        pgtype.Bool `json:"is_holiday"`
	HolidayStartDate pgtype.Date `json:"holiday_start_date"`
	HolidayEndDate   pgtype.Date `json:"holiday_end_date"`
	HolidayStartTime pgtype.Time `json:"holiday_start_time"`
	HolidayEndTime   pgtype.Time `json:"holiday_end_time"`
	ZoneID           pgtype.Int4 `json:"zone_id"`
	AdLink           pgtype.Text `json:"ad_link"`
}

func (q *Queries) UpdateMall(ctx context.Context, arg UpdateMallParams) (Mall, error) {
	row := q.db.QueryRow(ctx, updateMall,
		arg.ID,
		arg.ParentID,
		arg.Name,
		arg.MallNo,
		arg.Address,
		arg.City,
		arg.State,
		arg.CountryID,
		arg.Zip,
		arg.PhoneNo,
		arg.Latitude,
		arg.Longitude,
		arg.BannerPath,
		arg.Timezone,
		arg.MondayStart,
		arg.MondayEnd,
		arg.TuesdayStart,
		arg.TuesdayEnd,
		arg.WednesdayStart,
		arg.WednesdayEnd,
		arg.ThursdayStart,
		arg.ThursdayEnd,
		arg.FridayStart,
		arg.FridayEnd,
		arg.SaturdayStart,
		arg.SaturdayEnd,
		arg.SundayStart,
		arg.SundayEnd,
		arg.UserID,
		arg.Map,
		arg.IsHoliday,
		arg.HolidayStartDate,
		arg.HolidayEndDate,
		arg.HolidayStartTime,
		arg.HolidayEndTime,
		arg.ZoneID,
		arg.AdLink,
	)
	var i Mall
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.Name,
		&i.MallNo,
		&i.Address,
		&i.City,
		&i.State,
		&i.CountryID,
		&i.Zip,
		&i.PhoneNo,
		&i.Latitude,
		&i.Longitude,
		&i.BannerPath,
		&i.Isdeleted,
		&i.Isblocked,
		&i.Timezone,
		&i.MondayStart,
		&i.MondayEnd,
		&i.TuesdayStart,
		&i.TuesdayEnd,
		&i.WednesdayStart,
		&i.WednesdayEnd,
		&i.ThursdayStart,
		&i.ThursdayEnd,
		&i.FridayStart,
		&i.FridayEnd,
		&i.SaturdayStart,
		&i.SaturdayEnd,
		&i.SundayStart,
		&i.SundayEnd,
		&i.UserID,
		&i.Map,
		&i.IsHoliday,
		&i.HolidayStartDate,
		&i.HolidayEndDate,
		&i.HolidayStartTime,
		&i.HolidayEndTime,
		&i.ZoneID,
		&i.AdLink,
		&i.CreatedAt,
	)
	return i, err
}
