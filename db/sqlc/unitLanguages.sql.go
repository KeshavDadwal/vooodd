// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: unitLanguages.sql

package db

import (
	"context"
)

const createUnitLanguage = `-- name: CreateUnitLanguage :one
INSERT INTO unit_languages (
    unit_id,
    language_id
)
VALUES (
    $1,
    $2
)
RETURNING id
`

type CreateUnitLanguageParams struct {
	UnitID     int32 `json:"unit_id"`
	LanguageID int32 `json:"language_id"`
}

func (q *Queries) CreateUnitLanguage(ctx context.Context, arg CreateUnitLanguageParams) (int32, error) {
	row := q.db.QueryRow(ctx, createUnitLanguage, arg.UnitID, arg.LanguageID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteUnitLanguage = `-- name: DeleteUnitLanguage :one
DELETE FROM unit_languages WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteUnitLanguage(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteUnitLanguage, id)
	err := row.Scan(&id)
	return id, err
}

const selectUnitLanguages = `-- name: SelectUnitLanguages :many
SELECT id, unit_id, language_id, created_at FROM unit_languages
`

func (q *Queries) SelectUnitLanguages(ctx context.Context) ([]UnitLanguage, error) {
	rows, err := q.db.Query(ctx, selectUnitLanguages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UnitLanguage{}
	for rows.Next() {
		var i UnitLanguage
		if err := rows.Scan(
			&i.ID,
			&i.UnitID,
			&i.LanguageID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUnitLanguage = `-- name: UpdateUnitLanguage :one
UPDATE unit_languages
SET
    unit_id = $2,
    language_id = $3
WHERE id = $1
RETURNING id
`

type UpdateUnitLanguageParams struct {
	ID         int32 `json:"id"`
	UnitID     int32 `json:"unit_id"`
	LanguageID int32 `json:"language_id"`
}

func (q *Queries) UpdateUnitLanguage(ctx context.Context, arg UpdateUnitLanguageParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateUnitLanguage, arg.ID, arg.UnitID, arg.LanguageID)
	var id int32
	err := row.Scan(&id)
	return id, err
}
