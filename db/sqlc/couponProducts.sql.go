// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: couponProducts.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCouponProduct = `-- name: CreateCouponProduct :one
INSERT INTO coupon_products (coupon_id, product_id)
VALUES ($1, $2)
RETURNING id
`

type CreateCouponProductParams struct {
	CouponID  pgtype.Int4 `json:"coupon_id"`
	ProductID pgtype.Int4 `json:"product_id"`
}

func (q *Queries) CreateCouponProduct(ctx context.Context, arg CreateCouponProductParams) (int32, error) {
	row := q.db.QueryRow(ctx, createCouponProduct, arg.CouponID, arg.ProductID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteCouponProduct = `-- name: DeleteCouponProduct :one
DELETE FROM coupon_products WHERE coupon_id = $1 AND product_id = $2 RETURNING id
`

type DeleteCouponProductParams struct {
	CouponID  pgtype.Int4 `json:"coupon_id"`
	ProductID pgtype.Int4 `json:"product_id"`
}

func (q *Queries) DeleteCouponProduct(ctx context.Context, arg DeleteCouponProductParams) (int32, error) {
	row := q.db.QueryRow(ctx, deleteCouponProduct, arg.CouponID, arg.ProductID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const selectAllCouponProducts = `-- name: SelectAllCouponProducts :many
SELECT id, coupon_id, product_id, created_at FROM coupon_products
`

func (q *Queries) SelectAllCouponProducts(ctx context.Context) ([]CouponProduct, error) {
	rows, err := q.db.Query(ctx, selectAllCouponProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CouponProduct{}
	for rows.Next() {
		var i CouponProduct
		if err := rows.Scan(
			&i.ID,
			&i.CouponID,
			&i.ProductID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
