// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: userSettings.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUserSetting = `-- name: CreateUserSetting :one
INSERT INTO user_settings (
    user_id,
    mall_radius,
    store_radius
)
VALUES (
    $1,
    $2,
    $3
)
RETURNING id
`

type CreateUserSettingParams struct {
	UserID      int32       `json:"user_id"`
	MallRadius  pgtype.Int4 `json:"mall_radius"`
	StoreRadius pgtype.Int4 `json:"store_radius"`
}

func (q *Queries) CreateUserSetting(ctx context.Context, arg CreateUserSettingParams) (int32, error) {
	row := q.db.QueryRow(ctx, createUserSetting, arg.UserID, arg.MallRadius, arg.StoreRadius)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteUserSetting = `-- name: DeleteUserSetting :one
DELETE FROM user_settings
WHERE
    user_id = $1
    RETURNING id
`

func (q *Queries) DeleteUserSetting(ctx context.Context, userID int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteUserSetting, userID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getUserSettingsByUserId = `-- name: GetUserSettingsByUserId :one
SELECT
    id,
    user_id,
    mall_radius,
    store_radius,
    created_at
FROM
    user_settings
WHERE
    user_id = $1
`

func (q *Queries) GetUserSettingsByUserId(ctx context.Context, userID int32) (UserSetting, error) {
	row := q.db.QueryRow(ctx, getUserSettingsByUserId, userID)
	var i UserSetting
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.MallRadius,
		&i.StoreRadius,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserSetting = `-- name: UpdateUserSetting :one
UPDATE user_settings
SET
    mall_radius = $2,
    store_radius = $3
WHERE
    user_id = $1
    RETURNING id
`

type UpdateUserSettingParams struct {
	UserID      int32       `json:"user_id"`
	MallRadius  pgtype.Int4 `json:"mall_radius"`
	StoreRadius pgtype.Int4 `json:"store_radius"`
}

func (q *Queries) UpdateUserSetting(ctx context.Context, arg UpdateUserSettingParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateUserSetting, arg.UserID, arg.MallRadius, arg.StoreRadius)
	var id int32
	err := row.Scan(&id)
	return id, err
}
