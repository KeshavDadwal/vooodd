// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: productTests.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProductTest = `-- name: CreateProductTest :one
INSERT INTO product_tests (
    brand_id,
    product_category_id,
    name,
    sku,
    description,
    short_description,
    weight,
    new_from,
    new_end,
    isdeleted,
    isblocked,
    isbestseller,
    isfeatured,
    meta_title,
    meta_keywords,
    meta_description,
    price,
    unit_id
)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15,
    $16,
    $17,
    $18
)
RETURNING id
`

type CreateProductTestParams struct {
	BrandID           pgtype.Int4    `json:"brand_id"`
	ProductCategoryID pgtype.Int4    `json:"product_category_id"`
	Name              string         `json:"name"`
	Sku               string         `json:"sku"`
	Description       pgtype.Text    `json:"description"`
	ShortDescription  pgtype.Text    `json:"short_description"`
	Weight            pgtype.Numeric `json:"weight"`
	NewFrom           pgtype.Date    `json:"new_from"`
	NewEnd            pgtype.Date    `json:"new_end"`
	Isdeleted         pgtype.Bool    `json:"isdeleted"`
	Isblocked         pgtype.Bool    `json:"isblocked"`
	Isbestseller      pgtype.Bool    `json:"isbestseller"`
	Isfeatured        pgtype.Bool    `json:"isfeatured"`
	MetaTitle         string         `json:"meta_title"`
	MetaKeywords      string         `json:"meta_keywords"`
	MetaDescription   string         `json:"meta_description"`
	Price             pgtype.Numeric `json:"price"`
	UnitID            pgtype.Int4    `json:"unit_id"`
}

func (q *Queries) CreateProductTest(ctx context.Context, arg CreateProductTestParams) (int32, error) {
	row := q.db.QueryRow(ctx, createProductTest,
		arg.BrandID,
		arg.ProductCategoryID,
		arg.Name,
		arg.Sku,
		arg.Description,
		arg.ShortDescription,
		arg.Weight,
		arg.NewFrom,
		arg.NewEnd,
		arg.Isdeleted,
		arg.Isblocked,
		arg.Isbestseller,
		arg.Isfeatured,
		arg.MetaTitle,
		arg.MetaKeywords,
		arg.MetaDescription,
		arg.Price,
		arg.UnitID,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteProductTest = `-- name: DeleteProductTest :one
DELETE FROM product_tests WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteProductTest(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteProductTest, id)
	err := row.Scan(&id)
	return id, err
}

const selectProductTests = `-- name: SelectProductTests :many
SELECT id, brand_id, product_category_id, name, sku, description, short_description, weight, new_from, new_end, isdeleted, isblocked, isbestseller, isfeatured, meta_title, meta_keywords, meta_description, price, unit_id, created_at FROM product_tests
`

func (q *Queries) SelectProductTests(ctx context.Context) ([]ProductTest, error) {
	rows, err := q.db.Query(ctx, selectProductTests)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductTest{}
	for rows.Next() {
		var i ProductTest
		if err := rows.Scan(
			&i.ID,
			&i.BrandID,
			&i.ProductCategoryID,
			&i.Name,
			&i.Sku,
			&i.Description,
			&i.ShortDescription,
			&i.Weight,
			&i.NewFrom,
			&i.NewEnd,
			&i.Isdeleted,
			&i.Isblocked,
			&i.Isbestseller,
			&i.Isfeatured,
			&i.MetaTitle,
			&i.MetaKeywords,
			&i.MetaDescription,
			&i.Price,
			&i.UnitID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProductTest = `-- name: UpdateProductTest :one
UPDATE product_tests
SET
    brand_id = $2,
    product_category_id = $3,
    name = $4,
    sku = $5,
    description = $6,
    short_description = $7,
    weight = $8,
    new_from = $9,
    new_end = $10,
    isdeleted = $11,
    isblocked = $12,
    isbestseller = $13,
    isfeatured = $14,
    meta_title = $15,
    meta_keywords = $16,
    meta_description = $17,
    price = $18,
    unit_id = $19
WHERE id = $1
RETURNING id
`

type UpdateProductTestParams struct {
	ID                int32          `json:"id"`
	BrandID           pgtype.Int4    `json:"brand_id"`
	ProductCategoryID pgtype.Int4    `json:"product_category_id"`
	Name              string         `json:"name"`
	Sku               string         `json:"sku"`
	Description       pgtype.Text    `json:"description"`
	ShortDescription  pgtype.Text    `json:"short_description"`
	Weight            pgtype.Numeric `json:"weight"`
	NewFrom           pgtype.Date    `json:"new_from"`
	NewEnd            pgtype.Date    `json:"new_end"`
	Isdeleted         pgtype.Bool    `json:"isdeleted"`
	Isblocked         pgtype.Bool    `json:"isblocked"`
	Isbestseller      pgtype.Bool    `json:"isbestseller"`
	Isfeatured        pgtype.Bool    `json:"isfeatured"`
	MetaTitle         string         `json:"meta_title"`
	MetaKeywords      string         `json:"meta_keywords"`
	MetaDescription   string         `json:"meta_description"`
	Price             pgtype.Numeric `json:"price"`
	UnitID            pgtype.Int4    `json:"unit_id"`
}

func (q *Queries) UpdateProductTest(ctx context.Context, arg UpdateProductTestParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateProductTest,
		arg.ID,
		arg.BrandID,
		arg.ProductCategoryID,
		arg.Name,
		arg.Sku,
		arg.Description,
		arg.ShortDescription,
		arg.Weight,
		arg.NewFrom,
		arg.NewEnd,
		arg.Isdeleted,
		arg.Isblocked,
		arg.Isbestseller,
		arg.Isfeatured,
		arg.MetaTitle,
		arg.MetaKeywords,
		arg.MetaDescription,
		arg.Price,
		arg.UnitID,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
