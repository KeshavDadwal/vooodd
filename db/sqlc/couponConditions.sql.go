// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: couponConditions.sql

package db

import (
	"context"
)

const createCouponCondition = `-- name: CreateCouponCondition :one
INSERT INTO coupon_conditions (
    coupon_id,
    idx,
    type,
    type_id
)
VALUES (
    $1,
    $2,
    $3,
    $4
)
RETURNING id
`

type CreateCouponConditionParams struct {
	CouponID int32        `json:"coupon_id"`
	Idx      int32        `json:"idx"`
	Type     NullTypeEnum `json:"type"`
	TypeID   string       `json:"type_id"`
}

func (q *Queries) CreateCouponCondition(ctx context.Context, arg CreateCouponConditionParams) (int32, error) {
	row := q.db.QueryRow(ctx, createCouponCondition,
		arg.CouponID,
		arg.Idx,
		arg.Type,
		arg.TypeID,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteCouponCondition = `-- name: DeleteCouponCondition :one
DELETE FROM coupon_conditions WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteCouponCondition(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteCouponCondition, id)
	err := row.Scan(&id)
	return id, err
}

const selectAllCouponConditions = `-- name: SelectAllCouponConditions :many
SELECT id, coupon_id, idx, type, type_id, created_at FROM coupon_conditions
`

func (q *Queries) SelectAllCouponConditions(ctx context.Context) ([]CouponCondition, error) {
	rows, err := q.db.Query(ctx, selectAllCouponConditions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CouponCondition{}
	for rows.Next() {
		var i CouponCondition
		if err := rows.Scan(
			&i.ID,
			&i.CouponID,
			&i.Idx,
			&i.Type,
			&i.TypeID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectCouponConditions = `-- name: SelectCouponConditions :one
SELECT id, coupon_id, idx, type, type_id, created_at FROM coupon_conditions WHERE id = $1
`

func (q *Queries) SelectCouponConditions(ctx context.Context, id int32) (CouponCondition, error) {
	row := q.db.QueryRow(ctx, selectCouponConditions, id)
	var i CouponCondition
	err := row.Scan(
		&i.ID,
		&i.CouponID,
		&i.Idx,
		&i.Type,
		&i.TypeID,
		&i.CreatedAt,
	)
	return i, err
}

const updateCouponCondition = `-- name: UpdateCouponCondition :one
UPDATE coupon_conditions
SET
    idx = $2,
    type = $3,
    type_id = $4
WHERE id = $1
RETURNING id, coupon_id, idx, type, type_id, created_at
`

type UpdateCouponConditionParams struct {
	ID     int32        `json:"id"`
	Idx    int32        `json:"idx"`
	Type   NullTypeEnum `json:"type"`
	TypeID string       `json:"type_id"`
}

func (q *Queries) UpdateCouponCondition(ctx context.Context, arg UpdateCouponConditionParams) (CouponCondition, error) {
	row := q.db.QueryRow(ctx, updateCouponCondition,
		arg.ID,
		arg.Idx,
		arg.Type,
		arg.TypeID,
	)
	var i CouponCondition
	err := row.Scan(
		&i.ID,
		&i.CouponID,
		&i.Idx,
		&i.Type,
		&i.TypeID,
		&i.CreatedAt,
	)
	return i, err
}
