// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: currencies.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCurrency = `-- name: CreateCurrency :one
INSERT INTO currencies (
    name,
    symbol,
    isdefault,
    isdeleted,
    isblocked
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
) RETURNING id, name, symbol, isdefault, isdeleted, isblocked, created_at
`

type CreateCurrencyParams struct {
	Name      string      `json:"name"`
	Symbol    string      `json:"symbol"`
	Isdefault pgtype.Bool `json:"isdefault"`
	Isdeleted pgtype.Bool `json:"isdeleted"`
	Isblocked pgtype.Bool `json:"isblocked"`
}

func (q *Queries) CreateCurrency(ctx context.Context, arg CreateCurrencyParams) (Currency, error) {
	row := q.db.QueryRow(ctx, createCurrency,
		arg.Name,
		arg.Symbol,
		arg.Isdefault,
		arg.Isdeleted,
		arg.Isblocked,
	)
	var i Currency
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Symbol,
		&i.Isdefault,
		&i.Isdeleted,
		&i.Isblocked,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCurrency = `-- name: DeleteCurrency :one
DELETE FROM currencies WHERE id = $1
RETURNING id, name, symbol, isdefault, isdeleted, isblocked, created_at
`

func (q *Queries) DeleteCurrency(ctx context.Context, id int32) (Currency, error) {
	row := q.db.QueryRow(ctx, deleteCurrency, id)
	var i Currency
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Symbol,
		&i.Isdefault,
		&i.Isdeleted,
		&i.Isblocked,
		&i.CreatedAt,
	)
	return i, err
}

const getAllCurrency = `-- name: GetAllCurrency :many
SELECT id, name, symbol, isdefault, isdeleted, isblocked, created_at FROM currencies
`

func (q *Queries) GetAllCurrency(ctx context.Context) ([]Currency, error) {
	rows, err := q.db.Query(ctx, getAllCurrency)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Currency{}
	for rows.Next() {
		var i Currency
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Symbol,
			&i.Isdefault,
			&i.Isdeleted,
			&i.Isblocked,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCurrency = `-- name: GetCurrency :one
SELECT id, name, symbol, isdefault, isdeleted, isblocked, created_at FROM currencies WHERE id = $1
`

func (q *Queries) GetCurrency(ctx context.Context, id int32) (Currency, error) {
	row := q.db.QueryRow(ctx, getCurrency, id)
	var i Currency
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Symbol,
		&i.Isdefault,
		&i.Isdeleted,
		&i.Isblocked,
		&i.CreatedAt,
	)
	return i, err
}

const updateCurrency = `-- name: UpdateCurrency :one
UPDATE currencies
SET
    name = $2,
    symbol = $3,
    isdefault = $4,
    isdeleted = $5,
    isblocked = $6
WHERE id = $1
RETURNING id, name, symbol, isdefault, isdeleted, isblocked, created_at
`

type UpdateCurrencyParams struct {
	ID        int32       `json:"id"`
	Name      string      `json:"name"`
	Symbol    string      `json:"symbol"`
	Isdefault pgtype.Bool `json:"isdefault"`
	Isdeleted pgtype.Bool `json:"isdeleted"`
	Isblocked pgtype.Bool `json:"isblocked"`
}

func (q *Queries) UpdateCurrency(ctx context.Context, arg UpdateCurrencyParams) (Currency, error) {
	row := q.db.QueryRow(ctx, updateCurrency,
		arg.ID,
		arg.Name,
		arg.Symbol,
		arg.Isdefault,
		arg.Isdeleted,
		arg.Isblocked,
	)
	var i Currency
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Symbol,
		&i.Isdefault,
		&i.Isdeleted,
		&i.Isblocked,
		&i.CreatedAt,
	)
	return i, err
}
