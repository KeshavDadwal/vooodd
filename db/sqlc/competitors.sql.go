// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: competitors.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCompetitor = `-- name: CreateCompetitor :one
INSERT INTO competitors (name, logo, isdeleted, isblocked)
VALUES ($1, $2, $3, $4)
RETURNING id
`

type CreateCompetitorParams struct {
	Name      string      `json:"name"`
	Logo      pgtype.Text `json:"logo"`
	Isdeleted pgtype.Bool `json:"isdeleted"`
	Isblocked pgtype.Bool `json:"isblocked"`
}

func (q *Queries) CreateCompetitor(ctx context.Context, arg CreateCompetitorParams) (int32, error) {
	row := q.db.QueryRow(ctx, createCompetitor,
		arg.Name,
		arg.Logo,
		arg.Isdeleted,
		arg.Isblocked,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteCompetitor = `-- name: DeleteCompetitor :one
DELETE FROM competitors WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteCompetitor(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteCompetitor, id)
	err := row.Scan(&id)
	return id, err
}

const selectAllCompetitors = `-- name: SelectAllCompetitors :many
SELECT id, name, logo, isdeleted, isblocked, created_at FROM competitors
`

func (q *Queries) SelectAllCompetitors(ctx context.Context) ([]Competitor, error) {
	rows, err := q.db.Query(ctx, selectAllCompetitors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Competitor{}
	for rows.Next() {
		var i Competitor
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Logo,
			&i.Isdeleted,
			&i.Isblocked,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectCompetitors = `-- name: SelectCompetitors :one
SELECT id, name, logo, isdeleted, isblocked, created_at FROM competitors WHERE id = $1
`

func (q *Queries) SelectCompetitors(ctx context.Context, id int32) (Competitor, error) {
	row := q.db.QueryRow(ctx, selectCompetitors, id)
	var i Competitor
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Logo,
		&i.Isdeleted,
		&i.Isblocked,
		&i.CreatedAt,
	)
	return i, err
}

const updateCompetitor = `-- name: UpdateCompetitor :one
UPDATE competitors
SET name = $2, logo = $3, isdeleted = $4, isblocked = $5
WHERE id = $1
RETURNING id
`

type UpdateCompetitorParams struct {
	ID        int32       `json:"id"`
	Name      string      `json:"name"`
	Logo      pgtype.Text `json:"logo"`
	Isdeleted pgtype.Bool `json:"isdeleted"`
	Isblocked pgtype.Bool `json:"isblocked"`
}

func (q *Queries) UpdateCompetitor(ctx context.Context, arg UpdateCompetitorParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateCompetitor,
		arg.ID,
		arg.Name,
		arg.Logo,
		arg.Isdeleted,
		arg.Isblocked,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
