// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: contentManagementMobiles.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createContentManagementMobile = `-- name: CreateContentManagementMobile :one
INSERT INTO content_management_mobiles (name, title, link, link_text, content, isblocked, isdeleted)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id
`

type CreateContentManagementMobileParams struct {
	Name      string      `json:"name"`
	Title     string      `json:"title"`
	Link      pgtype.Text `json:"link"`
	LinkText  pgtype.Text `json:"link_text"`
	Content   string      `json:"content"`
	Isblocked pgtype.Bool `json:"isblocked"`
	Isdeleted pgtype.Bool `json:"isdeleted"`
}

func (q *Queries) CreateContentManagementMobile(ctx context.Context, arg CreateContentManagementMobileParams) (int32, error) {
	row := q.db.QueryRow(ctx, createContentManagementMobile,
		arg.Name,
		arg.Title,
		arg.Link,
		arg.LinkText,
		arg.Content,
		arg.Isblocked,
		arg.Isdeleted,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteContentManagementMobile = `-- name: DeleteContentManagementMobile :one
DELETE FROM content_management_mobiles WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteContentManagementMobile(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteContentManagementMobile, id)
	err := row.Scan(&id)
	return id, err
}

const selectAllContentManagementMobiles = `-- name: SelectAllContentManagementMobiles :many
SELECT id, name, title, link, link_text, content, isblocked, isdeleted, created_at FROM content_management_mobiles
`

func (q *Queries) SelectAllContentManagementMobiles(ctx context.Context) ([]ContentManagementMobile, error) {
	rows, err := q.db.Query(ctx, selectAllContentManagementMobiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ContentManagementMobile{}
	for rows.Next() {
		var i ContentManagementMobile
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Title,
			&i.Link,
			&i.LinkText,
			&i.Content,
			&i.Isblocked,
			&i.Isdeleted,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectContentManagementMobiles = `-- name: SelectContentManagementMobiles :one
SELECT id, name, title, link, link_text, content, isblocked, isdeleted, created_at FROM content_management_mobiles WHERE id = $1
`

func (q *Queries) SelectContentManagementMobiles(ctx context.Context, id int32) (ContentManagementMobile, error) {
	row := q.db.QueryRow(ctx, selectContentManagementMobiles, id)
	var i ContentManagementMobile
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Title,
		&i.Link,
		&i.LinkText,
		&i.Content,
		&i.Isblocked,
		&i.Isdeleted,
		&i.CreatedAt,
	)
	return i, err
}

const updateContentManagementMobile = `-- name: UpdateContentManagementMobile :one
UPDATE content_management_mobiles
SET name = $2, title = $3, link = $4, link_text = $5, content = $6, isblocked = $7, isdeleted = $8
WHERE id = $1
RETURNING id
`

type UpdateContentManagementMobileParams struct {
	ID        int32       `json:"id"`
	Name      string      `json:"name"`
	Title     string      `json:"title"`
	Link      pgtype.Text `json:"link"`
	LinkText  pgtype.Text `json:"link_text"`
	Content   string      `json:"content"`
	Isblocked pgtype.Bool `json:"isblocked"`
	Isdeleted pgtype.Bool `json:"isdeleted"`
}

func (q *Queries) UpdateContentManagementMobile(ctx context.Context, arg UpdateContentManagementMobileParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateContentManagementMobile,
		arg.ID,
		arg.Name,
		arg.Title,
		arg.Link,
		arg.LinkText,
		arg.Content,
		arg.Isblocked,
		arg.Isdeleted,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
