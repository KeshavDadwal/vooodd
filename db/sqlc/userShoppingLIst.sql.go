// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: userShoppingLIst.sql

package db

import (
	"context"
)

const createUserShoppingListItem = `-- name: CreateUserShoppingListItem :one
INSERT INTO user_shoping_lists (
    user_shoping_list_name_id,
    product_id,
    user_id,
    store_location_id,
    qty
)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
)
RETURNING id
`

type CreateUserShoppingListItemParams struct {
	UserShopingListNameID int32 `json:"user_shoping_list_name_id"`
	ProductID             int32 `json:"product_id"`
	UserID                int32 `json:"user_id"`
	StoreLocationID       int32 `json:"store_location_id"`
	Qty                   int32 `json:"qty"`
}

func (q *Queries) CreateUserShoppingListItem(ctx context.Context, arg CreateUserShoppingListItemParams) (int32, error) {
	row := q.db.QueryRow(ctx, createUserShoppingListItem,
		arg.UserShopingListNameID,
		arg.ProductID,
		arg.UserID,
		arg.StoreLocationID,
		arg.Qty,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteUserShoppingListItem = `-- name: DeleteUserShoppingListItem :one
DELETE FROM user_shoping_lists
WHERE
    id = $1
    RETURNING id
`

func (q *Queries) DeleteUserShoppingListItem(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteUserShoppingListItem, id)
	err := row.Scan(&id)
	return id, err
}

const getUserShoppingList = `-- name: GetUserShoppingList :many
SELECT
    id,
    user_shoping_list_name_id,
    product_id,
    user_id,
    store_location_id,
    qty,
    created_at
FROM
    user_shoping_lists
WHERE
    user_id = $1
`

func (q *Queries) GetUserShoppingList(ctx context.Context, userID int32) ([]UserShopingList, error) {
	rows, err := q.db.Query(ctx, getUserShoppingList, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserShopingList{}
	for rows.Next() {
		var i UserShopingList
		if err := rows.Scan(
			&i.ID,
			&i.UserShopingListNameID,
			&i.ProductID,
			&i.UserID,
			&i.StoreLocationID,
			&i.Qty,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserShoppingListItem = `-- name: UpdateUserShoppingListItem :one
UPDATE user_shoping_lists
SET
    user_shoping_list_name_id = $2,
    product_id = $3,
    store_location_id = $4,
    qty = $5
WHERE
    id = $1
    RETURNING id
`

type UpdateUserShoppingListItemParams struct {
	ID                    int32 `json:"id"`
	UserShopingListNameID int32 `json:"user_shoping_list_name_id"`
	ProductID             int32 `json:"product_id"`
	StoreLocationID       int32 `json:"store_location_id"`
	Qty                   int32 `json:"qty"`
}

func (q *Queries) UpdateUserShoppingListItem(ctx context.Context, arg UpdateUserShoppingListItemParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateUserShoppingListItem,
		arg.ID,
		arg.UserShopingListNameID,
		arg.ProductID,
		arg.StoreLocationID,
		arg.Qty,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
