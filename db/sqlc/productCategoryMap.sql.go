// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: productCategoryMap.sql

package db

import (
	"context"
)

const createProductCategoryMap = `-- name: CreateProductCategoryMap :one
INSERT INTO product_category_maps (
    product_id,
    product_category_id
)
VALUES (
    $1,
    $2
)
RETURNING id
`

type CreateProductCategoryMapParams struct {
	ProductID         int32 `json:"product_id"`
	ProductCategoryID int32 `json:"product_category_id"`
}

func (q *Queries) CreateProductCategoryMap(ctx context.Context, arg CreateProductCategoryMapParams) (int32, error) {
	row := q.db.QueryRow(ctx, createProductCategoryMap, arg.ProductID, arg.ProductCategoryID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteProductCategoryMap = `-- name: DeleteProductCategoryMap :one
DELETE FROM product_category_maps WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteProductCategoryMap(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteProductCategoryMap, id)
	err := row.Scan(&id)
	return id, err
}

const selectProductCategoryMaps = `-- name: SelectProductCategoryMaps :many
SELECT id, product_id, product_category_id, created_at FROM product_category_maps
`

func (q *Queries) SelectProductCategoryMaps(ctx context.Context) ([]ProductCategoryMap, error) {
	rows, err := q.db.Query(ctx, selectProductCategoryMaps)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductCategoryMap{}
	for rows.Next() {
		var i ProductCategoryMap
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.ProductCategoryID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProductCategoryMap = `-- name: UpdateProductCategoryMap :one
UPDATE product_category_maps
SET
    product_id = $2,
    product_category_id = $3
WHERE id = $1
RETURNING id
`

type UpdateProductCategoryMapParams struct {
	ID                int32 `json:"id"`
	ProductID         int32 `json:"product_id"`
	ProductCategoryID int32 `json:"product_category_id"`
}

func (q *Queries) UpdateProductCategoryMap(ctx context.Context, arg UpdateProductCategoryMapParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateProductCategoryMap, arg.ID, arg.ProductID, arg.ProductCategoryID)
	var id int32
	err := row.Scan(&id)
	return id, err
}
