// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: productCategoryLanguages.sql

package db

import (
	"context"
)

const createProductCategoryLanguage = `-- name: CreateProductCategoryLanguage :one
INSERT INTO product_category_languages (
    language_id,
    product_category_id
)
VALUES (
    $1,
    $2
)
RETURNING id
`

type CreateProductCategoryLanguageParams struct {
	LanguageID        int32 `json:"language_id"`
	ProductCategoryID int32 `json:"product_category_id"`
}

func (q *Queries) CreateProductCategoryLanguage(ctx context.Context, arg CreateProductCategoryLanguageParams) (int32, error) {
	row := q.db.QueryRow(ctx, createProductCategoryLanguage, arg.LanguageID, arg.ProductCategoryID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteProductCategoryLanguage = `-- name: DeleteProductCategoryLanguage :one
DELETE FROM product_category_languages WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteProductCategoryLanguage(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteProductCategoryLanguage, id)
	err := row.Scan(&id)
	return id, err
}

const selectProductCategoryLanguages = `-- name: SelectProductCategoryLanguages :many
SELECT id, language_id, product_category_id, created_at FROM product_category_languages
`

func (q *Queries) SelectProductCategoryLanguages(ctx context.Context) ([]ProductCategoryLanguage, error) {
	rows, err := q.db.Query(ctx, selectProductCategoryLanguages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductCategoryLanguage{}
	for rows.Next() {
		var i ProductCategoryLanguage
		if err := rows.Scan(
			&i.ID,
			&i.LanguageID,
			&i.ProductCategoryID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProductCategoryLanguage = `-- name: UpdateProductCategoryLanguage :one
UPDATE product_category_languages
SET
    language_id = $2,
    product_category_id = $3
WHERE id = $1
RETURNING id
`

type UpdateProductCategoryLanguageParams struct {
	ID                int32 `json:"id"`
	LanguageID        int32 `json:"language_id"`
	ProductCategoryID int32 `json:"product_category_id"`
}

func (q *Queries) UpdateProductCategoryLanguage(ctx context.Context, arg UpdateProductCategoryLanguageParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateProductCategoryLanguage, arg.ID, arg.LanguageID, arg.ProductCategoryID)
	var id int32
	err := row.Scan(&id)
	return id, err
}
