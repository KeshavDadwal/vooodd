// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: dealLanguages.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDealsLanguage = `-- name: CreateDealsLanguage :one
INSERT INTO deals_languages (deals_id, language_id, name)
VALUES ($1, $2, $3)
RETURNING id
`

type CreateDealsLanguageParams struct {
	DealsID    pgtype.Int4 `json:"deals_id"`
	LanguageID pgtype.Int4 `json:"language_id"`
	Name       pgtype.Text `json:"name"`
}

func (q *Queries) CreateDealsLanguage(ctx context.Context, arg CreateDealsLanguageParams) (int32, error) {
	row := q.db.QueryRow(ctx, createDealsLanguage, arg.DealsID, arg.LanguageID, arg.Name)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteDealsLanguage = `-- name: DeleteDealsLanguage :one
DELETE FROM deals_languages WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteDealsLanguage(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteDealsLanguage, id)
	err := row.Scan(&id)
	return id, err
}

const selectAllDealsLanguages = `-- name: SelectAllDealsLanguages :many
SELECT id, deals_id, language_id, name, created_at FROM deals_languages
`

func (q *Queries) SelectAllDealsLanguages(ctx context.Context) ([]DealsLanguage, error) {
	rows, err := q.db.Query(ctx, selectAllDealsLanguages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DealsLanguage{}
	for rows.Next() {
		var i DealsLanguage
		if err := rows.Scan(
			&i.ID,
			&i.DealsID,
			&i.LanguageID,
			&i.Name,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectDealsLanguages = `-- name: SelectDealsLanguages :one
SELECT id, deals_id, language_id, name, created_at FROM deals_languages where id = $1
`

func (q *Queries) SelectDealsLanguages(ctx context.Context, id int32) (DealsLanguage, error) {
	row := q.db.QueryRow(ctx, selectDealsLanguages, id)
	var i DealsLanguage
	err := row.Scan(
		&i.ID,
		&i.DealsID,
		&i.LanguageID,
		&i.Name,
		&i.CreatedAt,
	)
	return i, err
}

const updateDealsLanguage = `-- name: UpdateDealsLanguage :one
UPDATE deals_languages
SET
    deals_id = $2,
    language_id = $3,
    name = $4
WHERE id = $1
RETURNING id
`

type UpdateDealsLanguageParams struct {
	ID         int32       `json:"id"`
	DealsID    pgtype.Int4 `json:"deals_id"`
	LanguageID pgtype.Int4 `json:"language_id"`
	Name       pgtype.Text `json:"name"`
}

func (q *Queries) UpdateDealsLanguage(ctx context.Context, arg UpdateDealsLanguageParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateDealsLanguage,
		arg.ID,
		arg.DealsID,
		arg.LanguageID,
		arg.Name,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
