// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: productStoreLocations.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProductStoreLocation = `-- name: CreateProductStoreLocation :one
INSERT INTO product_store_locations (
    product_id,
    store_location_id
)
VALUES (
    $1,
    $2
)
RETURNING id
`

type CreateProductStoreLocationParams struct {
	ProductID       pgtype.Int4 `json:"product_id"`
	StoreLocationID pgtype.Int4 `json:"store_location_id"`
}

func (q *Queries) CreateProductStoreLocation(ctx context.Context, arg CreateProductStoreLocationParams) (int32, error) {
	row := q.db.QueryRow(ctx, createProductStoreLocation, arg.ProductID, arg.StoreLocationID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteProductStoreLocation = `-- name: DeleteProductStoreLocation :one
DELETE FROM product_store_locations WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteProductStoreLocation(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteProductStoreLocation, id)
	err := row.Scan(&id)
	return id, err
}

const selectProductStoreLocations = `-- name: SelectProductStoreLocations :many
SELECT id, product_id, store_location_id, created_at FROM product_store_locations
`

func (q *Queries) SelectProductStoreLocations(ctx context.Context) ([]ProductStoreLocation, error) {
	rows, err := q.db.Query(ctx, selectProductStoreLocations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductStoreLocation{}
	for rows.Next() {
		var i ProductStoreLocation
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.StoreLocationID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
