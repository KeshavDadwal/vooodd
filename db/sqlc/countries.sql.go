// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: countries.sql

package db

import (
	"context"
)

const createCountry = `-- name: CreateCountry :one
INSERT INTO countries (
    iso2,
    short_name,
    long_name,
    iso3,
    numcode,
    un_member,
    calling_code,
    cctld
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8
) RETURNING id
`

type CreateCountryParams struct {
	Iso2        string `json:"iso2"`
	ShortName   string `json:"short_name"`
	LongName    string `json:"long_name"`
	Iso3        string `json:"iso3"`
	Numcode     string `json:"numcode"`
	UnMember    string `json:"un_member"`
	CallingCode string `json:"calling_code"`
	Cctld       string `json:"cctld"`
}

func (q *Queries) CreateCountry(ctx context.Context, arg CreateCountryParams) (int32, error) {
	row := q.db.QueryRow(ctx, createCountry,
		arg.Iso2,
		arg.ShortName,
		arg.LongName,
		arg.Iso3,
		arg.Numcode,
		arg.UnMember,
		arg.CallingCode,
		arg.Cctld,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteCountry = `-- name: DeleteCountry :one
DELETE FROM countries WHERE id = $1
RETURNING id, iso2, short_name, long_name, iso3, numcode, un_member, calling_code, cctld, created_at
`

func (q *Queries) DeleteCountry(ctx context.Context, id int32) (Country, error) {
	row := q.db.QueryRow(ctx, deleteCountry, id)
	var i Country
	err := row.Scan(
		&i.ID,
		&i.Iso2,
		&i.ShortName,
		&i.LongName,
		&i.Iso3,
		&i.Numcode,
		&i.UnMember,
		&i.CallingCode,
		&i.Cctld,
		&i.CreatedAt,
	)
	return i, err
}

const getAllCountry = `-- name: GetAllCountry :one
SELECT id, iso2, short_name, long_name, iso3, numcode, un_member, calling_code, cctld, created_at FROM countries
`

func (q *Queries) GetAllCountry(ctx context.Context) (Country, error) {
	row := q.db.QueryRow(ctx, getAllCountry)
	var i Country
	err := row.Scan(
		&i.ID,
		&i.Iso2,
		&i.ShortName,
		&i.LongName,
		&i.Iso3,
		&i.Numcode,
		&i.UnMember,
		&i.CallingCode,
		&i.Cctld,
		&i.CreatedAt,
	)
	return i, err
}

const getCountry = `-- name: GetCountry :one
SELECT id, iso2, short_name, long_name, iso3, numcode, un_member, calling_code, cctld, created_at FROM countries WHERE id = $1
`

func (q *Queries) GetCountry(ctx context.Context, id int32) (Country, error) {
	row := q.db.QueryRow(ctx, getCountry, id)
	var i Country
	err := row.Scan(
		&i.ID,
		&i.Iso2,
		&i.ShortName,
		&i.LongName,
		&i.Iso3,
		&i.Numcode,
		&i.UnMember,
		&i.CallingCode,
		&i.Cctld,
		&i.CreatedAt,
	)
	return i, err
}

const updateCountry = `-- name: UpdateCountry :one
UPDATE countries
SET
    iso2 = $2,
    short_name = $3,
    long_name = $4,
    iso3 = $5,
    numcode = $6,
    un_member = $7,
    calling_code = $8,
    cctld = $9
WHERE id = $1
RETURNING id, iso2, short_name, long_name, iso3, numcode, un_member, calling_code, cctld, created_at
`

type UpdateCountryParams struct {
	ID          int32  `json:"id"`
	Iso2        string `json:"iso2"`
	ShortName   string `json:"short_name"`
	LongName    string `json:"long_name"`
	Iso3        string `json:"iso3"`
	Numcode     string `json:"numcode"`
	UnMember    string `json:"un_member"`
	CallingCode string `json:"calling_code"`
	Cctld       string `json:"cctld"`
}

func (q *Queries) UpdateCountry(ctx context.Context, arg UpdateCountryParams) (Country, error) {
	row := q.db.QueryRow(ctx, updateCountry,
		arg.ID,
		arg.Iso2,
		arg.ShortName,
		arg.LongName,
		arg.Iso3,
		arg.Numcode,
		arg.UnMember,
		arg.CallingCode,
		arg.Cctld,
	)
	var i Country
	err := row.Scan(
		&i.ID,
		&i.Iso2,
		&i.ShortName,
		&i.LongName,
		&i.Iso3,
		&i.Numcode,
		&i.UnMember,
		&i.CallingCode,
		&i.Cctld,
		&i.CreatedAt,
	)
	return i, err
}
