// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: contacts.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createContact = `-- name: CreateContact :one
INSERT INTO contacts (name, email, user_id, subject, message)
VALUES ($1, $2, $3, $4, $5)
RETURNING id
`

type CreateContactParams struct {
	Name    pgtype.Text `json:"name"`
	Email   string      `json:"email"`
	UserID  pgtype.Int4 `json:"user_id"`
	Subject pgtype.Text `json:"subject"`
	Message string      `json:"message"`
}

func (q *Queries) CreateContact(ctx context.Context, arg CreateContactParams) (int32, error) {
	row := q.db.QueryRow(ctx, createContact,
		arg.Name,
		arg.Email,
		arg.UserID,
		arg.Subject,
		arg.Message,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteContact = `-- name: DeleteContact :one
DELETE FROM contacts WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteContact(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteContact, id)
	err := row.Scan(&id)
	return id, err
}

const selectAllContacts = `-- name: SelectAllContacts :many
SELECT id, name, email, user_id, subject, message, created_at FROM contacts
`

func (q *Queries) SelectAllContacts(ctx context.Context) ([]Contact, error) {
	rows, err := q.db.Query(ctx, selectAllContacts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Contact{}
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.UserID,
			&i.Subject,
			&i.Message,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectContacts = `-- name: SelectContacts :one
SELECT id, name, email, user_id, subject, message, created_at FROM contacts where id =$1
`

func (q *Queries) SelectContacts(ctx context.Context, id int32) (Contact, error) {
	row := q.db.QueryRow(ctx, selectContacts, id)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.UserID,
		&i.Subject,
		&i.Message,
		&i.CreatedAt,
	)
	return i, err
}

const updateContact = `-- name: UpdateContact :one
UPDATE contacts
SET name = $2, email = $3, user_id = $4, subject = $5, message = $6
WHERE id = $1
RETURNING id
`

type UpdateContactParams struct {
	ID      int32       `json:"id"`
	Name    pgtype.Text `json:"name"`
	Email   string      `json:"email"`
	UserID  pgtype.Int4 `json:"user_id"`
	Subject pgtype.Text `json:"subject"`
	Message string      `json:"message"`
}

func (q *Queries) UpdateContact(ctx context.Context, arg UpdateContactParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateContact,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.UserID,
		arg.Subject,
		arg.Message,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
