// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: userWishlists.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUserWishlistItem = `-- name: CreateUserWishlistItem :one
INSERT INTO user_wishlists (
    user_id,
    product_id,
    store_location_id,
    wish_price,
    max_price,
    immediately,
    date_till
)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7
)
RETURNING id
`

type CreateUserWishlistItemParams struct {
	UserID          int32       `json:"user_id"`
	ProductID       int32       `json:"product_id"`
	StoreLocationID pgtype.Int4 `json:"store_location_id"`
	WishPrice       float64     `json:"wish_price"`
	MaxPrice        float64     `json:"max_price"`
	Immediately     pgtype.Bool `json:"immediately"`
	DateTill        pgtype.Date `json:"date_till"`
}

func (q *Queries) CreateUserWishlistItem(ctx context.Context, arg CreateUserWishlistItemParams) (int32, error) {
	row := q.db.QueryRow(ctx, createUserWishlistItem,
		arg.UserID,
		arg.ProductID,
		arg.StoreLocationID,
		arg.WishPrice,
		arg.MaxPrice,
		arg.Immediately,
		arg.DateTill,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteUserWishlistItem = `-- name: DeleteUserWishlistItem :one
DELETE FROM user_wishlists
WHERE
    id = $1
    RETURNING id
`

func (q *Queries) DeleteUserWishlistItem(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteUserWishlistItem, id)
	err := row.Scan(&id)
	return id, err
}

const getUserWishlistItems = `-- name: GetUserWishlistItems :many
SELECT
    id,
    user_id,
    product_id,
    store_location_id,
    wish_price,
    max_price,
    immediately,
    date_till,
    created_at
FROM
    user_wishlists
WHERE
    user_id = $1
`

func (q *Queries) GetUserWishlistItems(ctx context.Context, userID int32) ([]UserWishlist, error) {
	rows, err := q.db.Query(ctx, getUserWishlistItems, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserWishlist{}
	for rows.Next() {
		var i UserWishlist
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ProductID,
			&i.StoreLocationID,
			&i.WishPrice,
			&i.MaxPrice,
			&i.Immediately,
			&i.DateTill,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserWishlistItem = `-- name: UpdateUserWishlistItem :one
UPDATE user_wishlists
SET
    product_id = $2,
    store_location_id = $3,
    wish_price = $4,
    max_price = $5,
    immediately = $6,
    date_till = $7
WHERE
    id = $1
    RETURNING id
`

type UpdateUserWishlistItemParams struct {
	ID              int32       `json:"id"`
	ProductID       int32       `json:"product_id"`
	StoreLocationID pgtype.Int4 `json:"store_location_id"`
	WishPrice       float64     `json:"wish_price"`
	MaxPrice        float64     `json:"max_price"`
	Immediately     pgtype.Bool `json:"immediately"`
	DateTill        pgtype.Date `json:"date_till"`
}

func (q *Queries) UpdateUserWishlistItem(ctx context.Context, arg UpdateUserWishlistItemParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateUserWishlistItem,
		arg.ID,
		arg.ProductID,
		arg.StoreLocationID,
		arg.WishPrice,
		arg.MaxPrice,
		arg.Immediately,
		arg.DateTill,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
