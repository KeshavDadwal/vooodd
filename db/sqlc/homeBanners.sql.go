// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: homeBanners.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createHomeBanner = `-- name: CreateHomeBanner :one
INSERT INTO home_banners (name, url_type, description, param, image, isdefault, sequence, start_date, end_date)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id
`

type CreateHomeBannerParams struct {
	Name        string      `json:"name"`
	UrlType     string      `json:"url_type"`
	Description string      `json:"description"`
	Param       pgtype.Text `json:"param"`
	Image       string      `json:"image"`
	Isdefault   pgtype.Bool `json:"isdefault"`
	Sequence    pgtype.Int4 `json:"sequence"`
	StartDate   pgtype.Date `json:"start_date"`
	EndDate     pgtype.Date `json:"end_date"`
}

func (q *Queries) CreateHomeBanner(ctx context.Context, arg CreateHomeBannerParams) (int32, error) {
	row := q.db.QueryRow(ctx, createHomeBanner,
		arg.Name,
		arg.UrlType,
		arg.Description,
		arg.Param,
		arg.Image,
		arg.Isdefault,
		arg.Sequence,
		arg.StartDate,
		arg.EndDate,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteHomeBanner = `-- name: DeleteHomeBanner :one
DELETE FROM home_banners WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteHomeBanner(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteHomeBanner, id)
	err := row.Scan(&id)
	return id, err
}

const selectAllHomeBanners = `-- name: SelectAllHomeBanners :many
SELECT id, name, url_type, description, param, image, isdefault, sequence, start_date, end_date, isdeleted, isblocked, created_at FROM home_banners
`

func (q *Queries) SelectAllHomeBanners(ctx context.Context) ([]HomeBanner, error) {
	rows, err := q.db.Query(ctx, selectAllHomeBanners)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []HomeBanner{}
	for rows.Next() {
		var i HomeBanner
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.UrlType,
			&i.Description,
			&i.Param,
			&i.Image,
			&i.Isdefault,
			&i.Sequence,
			&i.StartDate,
			&i.EndDate,
			&i.Isdeleted,
			&i.Isblocked,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectHomeBanners = `-- name: SelectHomeBanners :one
SELECT id, name, url_type, description, param, image, isdefault, sequence, start_date, end_date, isdeleted, isblocked, created_at FROM home_banners where id = $1
`

func (q *Queries) SelectHomeBanners(ctx context.Context, id int32) (HomeBanner, error) {
	row := q.db.QueryRow(ctx, selectHomeBanners, id)
	var i HomeBanner
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UrlType,
		&i.Description,
		&i.Param,
		&i.Image,
		&i.Isdefault,
		&i.Sequence,
		&i.StartDate,
		&i.EndDate,
		&i.Isdeleted,
		&i.Isblocked,
		&i.CreatedAt,
	)
	return i, err
}

const updateHomeBanner = `-- name: UpdateHomeBanner :one
UPDATE home_banners
SET
    name = $2,
    url_type = $3,
    description = $4,
    param = $5,
    image = $6,
    isdefault = $7,
    sequence = $8,
    start_date = $9,
    end_date = $10
WHERE id = $1
RETURNING id
`

type UpdateHomeBannerParams struct {
	ID          int32       `json:"id"`
	Name        string      `json:"name"`
	UrlType     string      `json:"url_type"`
	Description string      `json:"description"`
	Param       pgtype.Text `json:"param"`
	Image       string      `json:"image"`
	Isdefault   pgtype.Bool `json:"isdefault"`
	Sequence    pgtype.Int4 `json:"sequence"`
	StartDate   pgtype.Date `json:"start_date"`
	EndDate     pgtype.Date `json:"end_date"`
}

func (q *Queries) UpdateHomeBanner(ctx context.Context, arg UpdateHomeBannerParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateHomeBanner,
		arg.ID,
		arg.Name,
		arg.UrlType,
		arg.Description,
		arg.Param,
		arg.Image,
		arg.Isdefault,
		arg.Sequence,
		arg.StartDate,
		arg.EndDate,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
