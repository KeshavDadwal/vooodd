// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: dislikeCounts.sql

package db

import (
	"context"
)

const createDislikeCount = `-- name: CreateDislikeCount :one
INSERT INTO dis_like_counts (
    user_id,
    offer_id
)
VALUES (
    $1,
    $2
)
RETURNING id
`

type CreateDislikeCountParams struct {
	UserID  int32 `json:"user_id"`
	OfferID int32 `json:"offer_id"`
}

func (q *Queries) CreateDislikeCount(ctx context.Context, arg CreateDislikeCountParams) (int32, error) {
	row := q.db.QueryRow(ctx, createDislikeCount, arg.UserID, arg.OfferID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteDislikeCount = `-- name: DeleteDislikeCount :one
DELETE FROM dis_like_counts WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteDislikeCount(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteDislikeCount, id)
	err := row.Scan(&id)
	return id, err
}

const selectAllDislikeCounts = `-- name: SelectAllDislikeCounts :many
SELECT id, user_id, offer_id, created_at FROM dis_like_counts
`

func (q *Queries) SelectAllDislikeCounts(ctx context.Context) ([]DisLikeCount, error) {
	rows, err := q.db.Query(ctx, selectAllDislikeCounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DisLikeCount{}
	for rows.Next() {
		var i DisLikeCount
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.OfferID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDislikeCount = `-- name: UpdateDislikeCount :one
UPDATE dis_like_counts
SET
    user_id = $2
WHERE id = $1
RETURNING id, user_id, offer_id, created_at
`

type UpdateDislikeCountParams struct {
	ID     int32 `json:"id"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) UpdateDislikeCount(ctx context.Context, arg UpdateDislikeCountParams) (DisLikeCount, error) {
	row := q.db.QueryRow(ctx, updateDislikeCount, arg.ID, arg.UserID)
	var i DisLikeCount
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OfferID,
		&i.CreatedAt,
	)
	return i, err
}
