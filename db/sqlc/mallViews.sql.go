// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: mallViews.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMallView = `-- name: CreateMallView :one
INSERT INTO mall_views (
    user_id,
    mall_id,
    store_id,
    visited,
    device_id,
    from_device,
    is_physical
)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7
)
RETURNING id
`

type CreateMallViewParams struct {
	UserID     int32       `json:"user_id"`
	MallID     int32       `json:"mall_id"`
	StoreID    int32       `json:"store_id"`
	Visited    pgtype.Date `json:"visited"`
	DeviceID   pgtype.Text `json:"device_id"`
	FromDevice pgtype.Bool `json:"from_device"`
	IsPhysical pgtype.Bool `json:"is_physical"`
}

func (q *Queries) CreateMallView(ctx context.Context, arg CreateMallViewParams) (int32, error) {
	row := q.db.QueryRow(ctx, createMallView,
		arg.UserID,
		arg.MallID,
		arg.StoreID,
		arg.Visited,
		arg.DeviceID,
		arg.FromDevice,
		arg.IsPhysical,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteMallView = `-- name: DeleteMallView :one
DELETE FROM mall_views WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteMallView(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteMallView, id)
	err := row.Scan(&id)
	return id, err
}

const selectMallViews = `-- name: SelectMallViews :many
SELECT id, user_id, mall_id, store_id, visited, device_id, from_device, is_physical, created_at FROM mall_views
`

func (q *Queries) SelectMallViews(ctx context.Context) ([]MallView, error) {
	rows, err := q.db.Query(ctx, selectMallViews)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MallView{}
	for rows.Next() {
		var i MallView
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.MallID,
			&i.StoreID,
			&i.Visited,
			&i.DeviceID,
			&i.FromDevice,
			&i.IsPhysical,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMallView = `-- name: UpdateMallView :one
UPDATE mall_views
SET
    user_id = $2,
    mall_id = $3,
    store_id = $4,
    visited = $5,
    device_id = $6,
    from_device = $7,
    is_physical = $8
WHERE id = $1
RETURNING id, user_id, mall_id, store_id, visited, device_id, from_device, is_physical, created_at
`

type UpdateMallViewParams struct {
	ID         int32       `json:"id"`
	UserID     int32       `json:"user_id"`
	MallID     int32       `json:"mall_id"`
	StoreID    int32       `json:"store_id"`
	Visited    pgtype.Date `json:"visited"`
	DeviceID   pgtype.Text `json:"device_id"`
	FromDevice pgtype.Bool `json:"from_device"`
	IsPhysical pgtype.Bool `json:"is_physical"`
}

func (q *Queries) UpdateMallView(ctx context.Context, arg UpdateMallViewParams) (MallView, error) {
	row := q.db.QueryRow(ctx, updateMallView,
		arg.ID,
		arg.UserID,
		arg.MallID,
		arg.StoreID,
		arg.Visited,
		arg.DeviceID,
		arg.FromDevice,
		arg.IsPhysical,
	)
	var i MallView
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.MallID,
		&i.StoreID,
		&i.Visited,
		&i.DeviceID,
		&i.FromDevice,
		&i.IsPhysical,
		&i.CreatedAt,
	)
	return i, err
}
