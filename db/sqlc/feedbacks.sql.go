// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: feedbacks.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createFeedback = `-- name: CreateFeedback :one
INSERT INTO feedbacks (email, message, user_id)
VALUES ($1, $2, $3)
RETURNING id
`

type CreateFeedbackParams struct {
	Email   string      `json:"email"`
	Message string      `json:"message"`
	UserID  pgtype.Int4 `json:"user_id"`
}

func (q *Queries) CreateFeedback(ctx context.Context, arg CreateFeedbackParams) (int32, error) {
	row := q.db.QueryRow(ctx, createFeedback, arg.Email, arg.Message, arg.UserID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteFeedback = `-- name: DeleteFeedback :one
DELETE FROM feedbacks WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteFeedback(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteFeedback, id)
	err := row.Scan(&id)
	return id, err
}

const selectAllFeedbacks = `-- name: SelectAllFeedbacks :many
SELECT id, email, message, user_id, created_at FROM feedbacks
`

func (q *Queries) SelectAllFeedbacks(ctx context.Context) ([]Feedback, error) {
	rows, err := q.db.Query(ctx, selectAllFeedbacks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Feedback{}
	for rows.Next() {
		var i Feedback
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Message,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFeedback = `-- name: UpdateFeedback :one
UPDATE feedbacks
SET
    email = $2,
    message = $3
WHERE id = $1
RETURNING id
`

type UpdateFeedbackParams struct {
	ID      int32  `json:"id"`
	Email   string `json:"email"`
	Message string `json:"message"`
}

func (q *Queries) UpdateFeedback(ctx context.Context, arg UpdateFeedbackParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateFeedback, arg.ID, arg.Email, arg.Message)
	var id int32
	err := row.Scan(&id)
	return id, err
}
