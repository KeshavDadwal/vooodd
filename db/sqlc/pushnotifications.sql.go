// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: pushnotifications.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPushNotification = `-- name: CreatePushNotification :one
INSERT INTO push_notifications (
    device_id,
    store_location_id,
    offer_id,
    is_sent,
    is_clicked
)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
)
RETURNING id
`

type CreatePushNotificationParams struct {
	DeviceID        string      `json:"device_id"`
	StoreLocationID int32       `json:"store_location_id"`
	OfferID         int32       `json:"offer_id"`
	IsSent          pgtype.Bool `json:"is_sent"`
	IsClicked       pgtype.Bool `json:"is_clicked"`
}

func (q *Queries) CreatePushNotification(ctx context.Context, arg CreatePushNotificationParams) (int32, error) {
	row := q.db.QueryRow(ctx, createPushNotification,
		arg.DeviceID,
		arg.StoreLocationID,
		arg.OfferID,
		arg.IsSent,
		arg.IsClicked,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deletePushNotification = `-- name: DeletePushNotification :one
DELETE FROM push_notifications
WHERE
    id = $1
    RETURNING id
`

func (q *Queries) DeletePushNotification(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deletePushNotification, id)
	err := row.Scan(&id)
	return id, err
}

const getStoreLocationPushNotifications = `-- name: GetStoreLocationPushNotifications :many
SELECT
    id,
    device_id,
    store_location_id,
    offer_id,
    is_sent,
    is_clicked,
    created_at
FROM
    push_notifications
WHERE
    store_location_id = $1
`

func (q *Queries) GetStoreLocationPushNotifications(ctx context.Context, storeLocationID int32) ([]PushNotification, error) {
	rows, err := q.db.Query(ctx, getStoreLocationPushNotifications, storeLocationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PushNotification{}
	for rows.Next() {
		var i PushNotification
		if err := rows.Scan(
			&i.ID,
			&i.DeviceID,
			&i.StoreLocationID,
			&i.OfferID,
			&i.IsSent,
			&i.IsClicked,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePushNotificationStatus = `-- name: UpdatePushNotificationStatus :one
UPDATE push_notifications
SET
    is_sent = $2,
    is_clicked = $3
WHERE
    id = $1
    RETURNING id
`

type UpdatePushNotificationStatusParams struct {
	ID        int32       `json:"id"`
	IsSent    pgtype.Bool `json:"is_sent"`
	IsClicked pgtype.Bool `json:"is_clicked"`
}

func (q *Queries) UpdatePushNotificationStatus(ctx context.Context, arg UpdatePushNotificationStatusParams) (int32, error) {
	row := q.db.QueryRow(ctx, updatePushNotificationStatus, arg.ID, arg.IsSent, arg.IsClicked)
	var id int32
	err := row.Scan(&id)
	return id, err
}
