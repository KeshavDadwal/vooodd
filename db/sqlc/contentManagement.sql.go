// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: contentManagement.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createContentManagement = `-- name: CreateContentManagement :one
INSERT INTO content_managements (name, title, content, isdeleted, isblocked)
VALUES ($1, $2, $3, $4, $5)
RETURNING id
`

type CreateContentManagementParams struct {
	Name      string      `json:"name"`
	Title     pgtype.Text `json:"title"`
	Content   pgtype.Text `json:"content"`
	Isdeleted pgtype.Bool `json:"isdeleted"`
	Isblocked pgtype.Bool `json:"isblocked"`
}

func (q *Queries) CreateContentManagement(ctx context.Context, arg CreateContentManagementParams) (int32, error) {
	row := q.db.QueryRow(ctx, createContentManagement,
		arg.Name,
		arg.Title,
		arg.Content,
		arg.Isdeleted,
		arg.Isblocked,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteContentManagement = `-- name: DeleteContentManagement :one
DELETE FROM content_managements WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteContentManagement(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteContentManagement, id)
	err := row.Scan(&id)
	return id, err
}

const selectAllContentManagements = `-- name: SelectAllContentManagements :many
SELECT id, name, title, content, isdeleted, isblocked, created_at FROM content_managements
`

func (q *Queries) SelectAllContentManagements(ctx context.Context) ([]ContentManagement, error) {
	rows, err := q.db.Query(ctx, selectAllContentManagements)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ContentManagement{}
	for rows.Next() {
		var i ContentManagement
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Title,
			&i.Content,
			&i.Isdeleted,
			&i.Isblocked,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectContentManagements = `-- name: SelectContentManagements :one
SELECT id, name, title, content, isdeleted, isblocked, created_at FROM content_managements WHERE id = $1
`

func (q *Queries) SelectContentManagements(ctx context.Context, id int32) (ContentManagement, error) {
	row := q.db.QueryRow(ctx, selectContentManagements, id)
	var i ContentManagement
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Title,
		&i.Content,
		&i.Isdeleted,
		&i.Isblocked,
		&i.CreatedAt,
	)
	return i, err
}

const updateContentManagement = `-- name: UpdateContentManagement :one
UPDATE content_managements
SET name = $2, title = $3, content = $4, isdeleted = $5, isblocked = $6
WHERE id = $1
RETURNING id
`

type UpdateContentManagementParams struct {
	ID        int32       `json:"id"`
	Name      string      `json:"name"`
	Title     pgtype.Text `json:"title"`
	Content   pgtype.Text `json:"content"`
	Isdeleted pgtype.Bool `json:"isdeleted"`
	Isblocked pgtype.Bool `json:"isblocked"`
}

func (q *Queries) UpdateContentManagement(ctx context.Context, arg UpdateContentManagementParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateContentManagement,
		arg.ID,
		arg.Name,
		arg.Title,
		arg.Content,
		arg.Isdeleted,
		arg.Isblocked,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
