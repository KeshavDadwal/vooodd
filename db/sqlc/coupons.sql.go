// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: coupons.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCoupon = `-- name: CreateCoupon :one
INSERT INTO coupons (
    store_id,
    brand_id,
    product_id,
    name,
    code,
    description,
    path,
    isdeleted,
    isblocked,
    user_id,
    price,
    ispercent,
    start_date,
    end_date,
    unit_id,
    qty
)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15,
    $16
)
RETURNING id
`

type CreateCouponParams struct {
	StoreID     pgtype.Int4    `json:"store_id"`
	BrandID     pgtype.Int4    `json:"brand_id"`
	ProductID   pgtype.Int4    `json:"product_id"`
	Name        string         `json:"name"`
	Code        string         `json:"code"`
	Description pgtype.Text    `json:"description"`
	Path        pgtype.Text    `json:"path"`
	Isdeleted   pgtype.Bool    `json:"isdeleted"`
	Isblocked   pgtype.Bool    `json:"isblocked"`
	UserID      int32          `json:"user_id"`
	Price       pgtype.Numeric `json:"price"`
	Ispercent   int32          `json:"ispercent"`
	StartDate   pgtype.Date    `json:"start_date"`
	EndDate     pgtype.Date    `json:"end_date"`
	UnitID      pgtype.Int4    `json:"unit_id"`
	Qty         pgtype.Int4    `json:"qty"`
}

func (q *Queries) CreateCoupon(ctx context.Context, arg CreateCouponParams) (int32, error) {
	row := q.db.QueryRow(ctx, createCoupon,
		arg.StoreID,
		arg.BrandID,
		arg.ProductID,
		arg.Name,
		arg.Code,
		arg.Description,
		arg.Path,
		arg.Isdeleted,
		arg.Isblocked,
		arg.UserID,
		arg.Price,
		arg.Ispercent,
		arg.StartDate,
		arg.EndDate,
		arg.UnitID,
		arg.Qty,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteCoupon = `-- name: DeleteCoupon :one
DELETE FROM coupons WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteCoupon(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteCoupon, id)
	err := row.Scan(&id)
	return id, err
}

const selectAllCoupons = `-- name: SelectAllCoupons :many
SELECT id, store_id, brand_id, product_id, name, code, description, path, isdeleted, isblocked, user_id, price, ispercent, start_date, end_date, unit_id, qty, created_at FROM coupons
`

func (q *Queries) SelectAllCoupons(ctx context.Context) ([]Coupon, error) {
	rows, err := q.db.Query(ctx, selectAllCoupons)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Coupon{}
	for rows.Next() {
		var i Coupon
		if err := rows.Scan(
			&i.ID,
			&i.StoreID,
			&i.BrandID,
			&i.ProductID,
			&i.Name,
			&i.Code,
			&i.Description,
			&i.Path,
			&i.Isdeleted,
			&i.Isblocked,
			&i.UserID,
			&i.Price,
			&i.Ispercent,
			&i.StartDate,
			&i.EndDate,
			&i.UnitID,
			&i.Qty,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectCoupons = `-- name: SelectCoupons :one
SELECT id, store_id, brand_id, product_id, name, code, description, path, isdeleted, isblocked, user_id, price, ispercent, start_date, end_date, unit_id, qty, created_at FROM coupons WHERE id = $1
`

func (q *Queries) SelectCoupons(ctx context.Context, id int32) (Coupon, error) {
	row := q.db.QueryRow(ctx, selectCoupons, id)
	var i Coupon
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.BrandID,
		&i.ProductID,
		&i.Name,
		&i.Code,
		&i.Description,
		&i.Path,
		&i.Isdeleted,
		&i.Isblocked,
		&i.UserID,
		&i.Price,
		&i.Ispercent,
		&i.StartDate,
		&i.EndDate,
		&i.UnitID,
		&i.Qty,
		&i.CreatedAt,
	)
	return i, err
}

const updateCoupon = `-- name: UpdateCoupon :one
UPDATE coupons
SET
    store_id = $2,
    brand_id = $3,
    product_id = $4,
    name = $5,
    code = $6,
    description = $7,
    path = $8,
    isdeleted = $9,
    isblocked = $10,
    user_id = $11,
    price = $12,
    ispercent = $13,
    start_date = $14,
    end_date = $15,
    unit_id = $16,
    qty = $17
WHERE id = $1
RETURNING id
`

type UpdateCouponParams struct {
	ID          int32          `json:"id"`
	StoreID     pgtype.Int4    `json:"store_id"`
	BrandID     pgtype.Int4    `json:"brand_id"`
	ProductID   pgtype.Int4    `json:"product_id"`
	Name        string         `json:"name"`
	Code        string         `json:"code"`
	Description pgtype.Text    `json:"description"`
	Path        pgtype.Text    `json:"path"`
	Isdeleted   pgtype.Bool    `json:"isdeleted"`
	Isblocked   pgtype.Bool    `json:"isblocked"`
	UserID      int32          `json:"user_id"`
	Price       pgtype.Numeric `json:"price"`
	Ispercent   int32          `json:"ispercent"`
	StartDate   pgtype.Date    `json:"start_date"`
	EndDate     pgtype.Date    `json:"end_date"`
	UnitID      pgtype.Int4    `json:"unit_id"`
	Qty         pgtype.Int4    `json:"qty"`
}

func (q *Queries) UpdateCoupon(ctx context.Context, arg UpdateCouponParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateCoupon,
		arg.ID,
		arg.StoreID,
		arg.BrandID,
		arg.ProductID,
		arg.Name,
		arg.Code,
		arg.Description,
		arg.Path,
		arg.Isdeleted,
		arg.Isblocked,
		arg.UserID,
		arg.Price,
		arg.Ispercent,
		arg.StartDate,
		arg.EndDate,
		arg.UnitID,
		arg.Qty,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
